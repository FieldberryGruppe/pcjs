     1                                  ;
     2                                  ;   test386.nasm
     3                                  ;   Copyright Â© 2012-2015 Jeff Parsons <Jeff@pcjs.org>
     4                                  ;
     5                                  ;   This file is part of PCjs, which is part of the JavaScript Machines Project (aka JSMachines)
     6                                  ;   at <http://jsmachines.net/> and <http://pcjs.org/>.
     7                                  ;
     8                                  ;   PCjs is free software: you can redistribute it and/or modify it under the terms of the
     9                                  ;   GNU General Public License as published by the Free Software Foundation, either version 3
    10                                  ;   of the License, or (at your option) any later version.
    11                                  ;
    12                                  ;   PCjs is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
    13                                  ;   even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    14                                  ;   GNU General Public License for more details.
    15                                  ;
    16                                  ;   You should have received a copy of the GNU General Public License along with PCjs.  If not,
    17                                  ;   see <http://www.gnu.org/licenses/gpl.html>.
    18                                  ;
    19                                  ;   You are required to include the above copyright notice in every source code file of every
    20                                  ;   copy or modified version of this work, and to display that copyright notice on every screen
    21                                  ;   that loads or runs any version of this software (see Computer.sCopyright).
    22                                  ;
    23                                  ;   Some PCjs files also attempt to load external resource files, such as character-image files,
    24                                  ;   ROM files, and disk image files. Those external resource files are not considered part of the
    25                                  ;   PCjs program for purposes of the GNU General Public License, and the author does not claim
    26                                  ;   any copyright as to their contents.
    27                                  ;
    28                                  ;   Overview
    29                                  ;   --------
    30                                  ;   This file is designed to run both as a test ROM and as a DOS .COM file (hence the "org 0x100"),
    31                                  ;   which is why it has a ".com" extension instead of the more typical ".rom" extension.
    32                                  ;
    33                                  ;   When used as a ROM, it should be installed at physical address 983296 (0xf0100) and aliased at
    34                                  ;   physical address 4294902016 (0xffff0100).  The jump at jmpStart should align with the CPU reset
    35                                  ;   address (%0xfffffff0), which will transfer control to 0xf000:0x0100.  From that point on,
    36                                  ;   all memory accesses should remain within the first 1Mb.
    37                                  ;
    38                                  ;   The code which attempts to update myGDT and addrGDT will have no effect when installed as a ROM,
    39                                  ;   which is fine, because those data structures are predefined with appropriate ROM-based addresses.
    40                                  ;
    41                                  ;   See the machine definition file in /modules/pcjs/bin/test386.json for a configuration that can
    42                                  ;   load this file as a ROM image.
    43                                  ;
    44                                  ;   REAL32 Notes
    45                                  ;   ------------
    46                                  ;   REAL32 is NOT enabled by default, because based on what I've seen in VirtualBox (and notes at
    47                                  ;   http://geezer.osdevbrasil.net/johnfine/segments.htm), if CS is loaded with a 32-bit code segment
    48                                  ;   while in protected-mode and we then return to real-mode, even if we immediately perform a FAR jump
    49                                  ;   with a real-mode CS, the base of CS will be updated, but all the other segment attributes, like
    50                                  ;   the 32-bit EXT_BIG attribute, remain unchanged.  As a result, the processor will crash as soon as
    51                                  ;   it starts executing 16-bit real-mode code, because it's being misinterpreted as 32-bit code, and
    52                                  ;   there doesn't appear to be anything you can do about it from real-mode.
    53                                  ;
    54                                  ;   The work-around: you MUST load CS with a 16-bit code segment BEFORE returning to real-mode.
    55                                  ;
    56                                  ;   "Unreal mode" works by setting OTHER segment registers, like DS and ES, to 32-bit segments before
    57                                  ;   returning to real-mode -- just not CS.  SS probably shouldn't be set to a 32-bit segment either,
    58                                  ;   because that causes implicit pushes to use ESP instead of SP, even in real-mode.
    59                                  ;
    60                                  ;   The code below ensures that, before returning to real-mode, all of CS, DS, ES, and SS contain
    61                                  ;   16-bit protected-mode selectors; note, however, that my 16-bit protected-mode data descriptor uses
    62                                  ;   a full 20-bit limit, so DS, ES, and SS will still have a limit of 1Mb instead of the usual 64Kb,
    63                                  ;   even after returning to real-mode.  I use the larger limit because it's convenient to have access
    64                                  ;   to the first 1Mb in protected-mode, with or without a 32-bit data segment, and the larger data
    65                                  ;   segment limit shouldn't affect any 16-bit real-mode operations.
    66                                  ;
    67                                  	cpu	386
    68                                  	org	0x100
    69                                  	section .text
    70                                  
    71                                  	%include "dos.inc"
    72                              <1> INT_DOSEXIT			EQU	20H
    73                              <1> INT_DOS				EQU	21H
    74                              <1> DOS_ABORT			EQU	00H
    75                              <1> DOS_STD_CON_INPUT		EQU	01H
    76                              <1> DOS_STD_CON_OUTPUT		EQU	02H
    77                              <1> DOS_STD_AUX_INPUT		EQU	03H
    78                              <1> DOS_STD_AUX_OUTPUT		EQU	04H
    79                              <1> DOS_STD_PRINTER_OUTPUT		EQU	05H
    80                              <1> DOS_RAW_CON_IO			EQU	06H
    81                              <1> DOS_RAW_CON_INPUT		EQU	07H
    82                              <1> DOS_STD_CON_INPUT_NO_ECHO	EQU	08H
    83                              <1> DOS_STD_CON_STRING_OUTPUT	EQU	09H
    84                              <1> DOS_STD_CON_STRING_INPUT	EQU	0AH
    85                              <1> DOS_STD_CON_INPUT_STATUS	EQU	0BH
    86                              <1> DOS_STD_CON_INPUT_FLUSH		EQU	0CH
    87                              <1> DOS_DISK_RESET			EQU	0DH
    88                              <1> DOS_SET_DEFAULT_DRIVE		EQU	0EH
    89                              <1> DOS_FCB_OPEN			EQU	0FH
    90                              <1> DOS_FCB_CLOSE			EQU	10H
    91                              <1> DOS_DIR_SEARCH_FIRST		EQU	11H
    92                              <1> DOS_DIR_SEARCH_NEXT		EQU	12H
    93                              <1> DOS_FCB_DELETE			EQU	13H
    94                              <1> DOS_FCB_SEQ_READ		EQU	14H
    95                              <1> DOS_FCB_SEQ_WRITE		EQU	15H
    96                              <1> DOS_FCB_CREATE			EQU	16H
    97                              <1> DOS_FCB_RENAME			EQU	17H
    98                              <1> DOS_RESERVED18			EQU	18H
    99                              <1> DOS_GET_DEFAULT_DRIVE		EQU	19H
   100                              <1> DOS_SET_DMA			EQU	1AH
   101                              <1> DOS_RESERVED1B			EQU	1BH
   102                              <1> DOS_RESERVED1C			EQU	1CH
   103                              <1> DOS_RESERVED1D			EQU	1DH
   104                              <1> DOS_RESERVED1E			EQU	1EH
   105                              <1> DOS_GET_DEFAULT_DPB		EQU	1FH
   106                              <1> DOS_RESERVED20			EQU	20H
   107                              <1> DOS_FCB_RANDOM_READ		EQU	21H
   108                              <1> DOS_FCB_RANDOM_WRITE		EQU	22H
   109                              <1> DOS_GET_FCB_FILE_LENGTH		EQU	23H
   110                              <1> DOS_GET_FCB_POSITION		EQU	24H
   111                              <1> DOS_SET_INTERRUPT_VECTOR	EQU	25H
   112                              <1> DOS_CREATE_PDB			EQU	26H
   113                              <1> DOS_FCB_RANDOM_READ_BLOCK	EQU	27H
   114                              <1> DOS_FCB_RANDOM_WRITE_BLOCK	EQU	28H
   115                              <1> DOS_PARSE_FILE_DESCRIPTOR	EQU	29H
   116                              <1> DOS_GET_DATE			EQU	2AH
   117                              <1> DOS_SET_DATE			EQU	2BH
   118                              <1> DOS_GET_TIME			EQU	2CH
   119                              <1> DOS_SET_TIME			EQU	2DH
   120                              <1> DOS_SET_VERIFY_ON_WRITE		EQU	2EH
   121                              <1> DOS_GET_DMA			EQU	2FH
   122                              <1> DOS_GET_VERSION			EQU	30H
   123                              <1> DOS_KEEP_PROCESS		EQU	31H
   124                              <1> DOS_GET_DPB			EQU	32H
   125                              <1> DOS_SET_CTRL_C_TRAPPING		EQU	33H
   126                              <1> DOS_GET_INDOS_FLAG		EQU	34H
   127                              <1> DOS_GET_INTERRUPT_VECTOR	EQU	35H
   128                              <1> DOS_GET_DRIVE_FREESPACE		EQU	36H
   129                              <1> DOS_CHAR_OPER			EQU	37H
   130                              <1> DOS_INTERNATIONAL_SUPPORT	EQU	38H
   131                              <1> DOS_MKDIR			EQU	39H
   132                              <1> DOS_RMDIR			EQU	3AH
   133                              <1> DOS_CHDIR			EQU	3BH
   134                              <1> DOS_CREAT			EQU	3CH
   135                              <1> DOS_OPEN			EQU	3DH
   136                              <1> DOS_CLOSE			EQU	3EH
   137                              <1> DOS_READ			EQU	3FH
   138                              <1> DOS_WRITE			EQU	40H
   139                              <1> DOS_UNLINK			EQU	41H
   140                              <1> DOS_LSEEK			EQU	42H
   141                              <1> DOS_CHMOD			EQU	43H
   142                              <1> DOS_IOCTL			EQU	44H
   143                              <1> DOS_XDUP			EQU	45H
   144                              <1> DOS_XDUP2			EQU	46H
   145                              <1> DOS_GETDIR			EQU	47H
   146                              <1> DOS_ALLOC			EQU	48H
   147                              <1> DOS_DEALLOC			EQU	49H
   148                              <1> DOS_SETBLOCK			EQU	4AH
   149                              <1> DOS_EXEC			EQU	4BH
   150                              <1> DOS_EXIT			EQU	4CH
   151                              <1> DOS_WAIT			EQU	4DH
   152                              <1> DOS_FIND_FIRST			EQU	4EH
   153                              <1> DOS_FIND_NEXT			EQU	4FH
   154                              <1> DOS_SET_CURRENT_PDB		EQU	50H
   155                              <1> DOS_GET_CURRENT_PDB		EQU	51H
   156                              <1> DOS_GET_SYSINIT_VARS		EQU	52H
   157                              <1> DOS_SET_DPB			EQU	53H
   158                              <1> DOS_GET_VERIFY_ON_WRITE		EQU	54H
   159                              <1> DOS_DUP_PDB			EQU	55H
   160                              <1> DOS_RENAME			EQU	56H
   161                              <1> DOS_FILE_TIMES			EQU	57H
   162                              <1> DOS_RESERVED58			EQU	58H
   163                              <1> DOS_GET_EXTENDED_ERROR		EQU	59H
   164                              <1> DOS_CREATE_TEMP_FILE		EQU	5AH
   165                              <1> DOS_CREATE_NEW_FILE		EQU	5BH
   166                              <1> DOS_LOCK_OPER			EQU	5CH
   167                              <1> DOS_SERVER_CALL			EQU	5DH
   168                              <1> DOS_USER_OPER			EQU	5EH
   169                              <1> DOS_ASSIGN_OPER			EQU	5FH
   170                              <1> DOS_XNAMETRANS			EQU	60H
   171                              <1> DOS_JSA				EQU	61H
   172                              <1> DOS_GET_CURRENT_PSP		EQU	62H
   173                              <1> DOS_HONGEUL			EQU	63H
   174                              <1> DOS_SYSINITSLEAZE		EQU	64H
   175                              <1> DOSERR_NONE			EQU	00H
   176                              <1> DOSERR_BADFUNCTION		EQU	01H
   177                              <1> DOSERR_NOFILE			EQU	02H
   178                              <1> DOSERR_NOPATH			EQU	03H
   179                              <1> DOSERR_NOHANDLES		EQU	04H
   180                              <1> DOSERR_NOACCESS			EQU	05H
   181                              <1> DOSERR_BADHANDLE		EQU	06H
   182                              <1> DOSERR_BADARENA			EQU	07H
   183                              <1> DOSERR_NOMEMORY			EQU	08H
   184                              <1> DOSERR_BADADDRESS		EQU	09H
   185                              <1> DOSERR_BADENVIRONMENT		EQU	0AH
   186                              <1> DOSERR_BADFORMAT		EQU	0BH
   187                              <1> DOSERR_BADACCESS		EQU	0CH
   188                              <1> DOSERR_BADDATA			EQU	0DH
   189                              <1> DOSERR_BADUNIT			EQU	0EH
   190                              <1> DOSERR_BADDISK			EQU	0FH
   191                              <1> DOSERR_DELETECURDIR		EQU	10H
   192                              <1> DOSERR_NOTSAMEDEVICE		EQU	11H
   193                              <1> DOSERR_NOMOREFILES		EQU	12H
   194                              <1> DOSERR_WRITEPROTECT		EQU	13H
   195                              <1> DOSERR_UNKNOWNUNIT		EQU	14H
   196                              <1> DOSERR_DRIVENOTREADY		EQU	15H
   197                              <1> DOSERR_BADCOMMAND		EQU	16H
   198                              <1> DOSERR_DATA			EQU	17H
   199                              <1> DOSERR_BADREQUEST		EQU	18H
   200                              <1> DOSERR_SEEK			EQU	19H
   201                              <1> DOSERR_UNKNOWNMEDIA		EQU	1AH
   202                              <1> DOSERR_BADSECTOR		EQU	1BH
   203                              <1> DOSERR_NOPAPER			EQU	1CH
   204                              <1> DOSERR_WRITEFAULT		EQU	1DH
   205                              <1> DOSERR_READFAULT		EQU	1EH
   206                              <1> DOSERR_GENERALFAILURE		EQU	1FH
   207                              <1> DOSERR_NOTSHARED		EQU	20H
   208                              <1> DOSERR_LOCKED			EQU	21H
   209                              <1> DOSERR_DISKCHANGE		EQU	22H
   210                              <1> SEEK_SET			EQU	00H
   211                              <1> SEEK_CUR			EQU	01H
   212                              <1> SEEK_END			EQU	02H
   213                                  	%include "misc.inc"
   214                              <1> CR	equ	0x0d
   215                              <1> LF	equ	0x0a
   216                              <1> 
   217                              <1> ;
   218                              <1> ; The "set" macro initializes a register to the specified value (eg, "set eax,0")
   219                              <1> ;
   220                              <1> %macro	set	2
   221                              <1>     %ifnum %2
   222                              <1>       %if %2 = 0
   223                              <1> 	xor	%1,%1
   224                              <1>       %else
   225                              <1>     	mov	%1,%2
   226                              <1>       %endif
   227                              <1>     %else
   228                              <1>     	mov	%1,%2
   229                              <1>     %endif
   230                              <1> %endmacro
   231                                  	%include "x86.inc"
   232                              <1> ;
   233                              <1> ; X86.DESC defines (see x86.js)
   234                              <1> ;
   235                              <1> PS_CF			equ	0x0001
   236                              <1> PS_PF			equ	0x0004
   237                              <1> PS_AF			equ	0x0010
   238                              <1> PS_ZF			equ	0x0040
   239                              <1> PS_SF			equ	0x0080
   240                              <1> PS_TF			equ	0x0100
   241                              <1> PS_IF			equ	0x0200
   242                              <1> PS_DF			equ	0x0400
   243                              <1> PS_OF			equ	0x0800
   244                              <1> PS_ARITH		equ	(PS_CF | PS_PF | PS_AF | PS_ZF | PS_SF | PS_OF)
   245                              <1> PS_LOGIC		equ	(PS_CF | PS_PF | PS_ZF | PS_SF | PS_OF)
   246                              <1> PS_MULTIPLY		equ	(PS_CF | PS_OF)	; only CF and OF are "defined" following MUL or IMUL
   247                              <1> PS_DIVIDE		equ	0		; none of the Processor Status flags are "defined" following DIV or IDIV
   248                              <1> 
   249                              <1> CR0_MSW_PE		equ	0x0001
   250                              <1> CR0_PG			equ	0x80000000	; set if paging enabled
   251                              <1> 
   252                              <1> ACC_TYPE_GATE386_INT	equ	0x0E00
   253                              <1> ACC_TYPE_SEG		equ	0x1000
   254                              <1> ACC_PRESENT		equ	0x8000
   255                              <1> ACC_TYPE_CODE		equ	0x0800
   256                              <1> ACC_TYPE_READABLE	equ	0x0200
   257                              <1> ACC_TYPE_WRITABLE	equ	0x0200
   258                              <1> ACC_TYPE_CODE_READABLE	equ	0x1a00
   259                              <1> ACC_TYPE_DATA_WRITABLE	equ	0x1200
   260                              <1> 
   261                              <1> 
   262                              <1> EXT_NONE		equ	0x0000
   263                              <1> EXT_BIG			equ	0x0040
   264                              <1> 
   265                              <1> PTE_FRAME		equ	0xfffff000
   266                              <1> PTE_DIRTY		equ	0x00000040	; page has been modified
   267                              <1> PTE_ACCESSED		equ	0x00000020      ; page has been accessed
   268                              <1> PTE_USER		equ	0x00000004	; set for user level (CPL 3), clear for supervisor level (CPL 0-2)
   269                              <1> PTE_READWRITE		equ	0x00000002	; set for read/write, clear for read-only (affects CPL 3 only)
   270                              <1> PTE_PRESENT		equ	0x00000001   	; set for present page, clear for not-present page
   271                                  
   272                                  	bits	16
   273                                  
   274                                  PAGING equ 1
   275                                  
   276                                  ;
   277                                  ;   If we built our data structures in RAM, we might use the first page of RAM (0x0000-0x0fff) like so:
   278                                  ;
   279                                  ;	0x0000-0x03ff	Real-mode IDT (256*4)
   280                                  ;	0x0400-0x0bff	Prot-mode IDT (256*8)
   281                                  ;	0x0c00-0x0cff	RAM_GDT (for 32 GDT selectors)
   282                                  ;	0x0d00-0x0d07	RAM_IDTR
   283                                  ;	0x0d08-0x0d0f	RAM_GDTR
   284                                  ;	0x0d10-0x0d13	RAM_RETF (Real-mode return address)
   285                                  ;	0x0d14-0x0fff	reserved
   286                                  ;
   287                                  ;   And in the second page (0x1000-0x1fff), we might build a page directory, followed by a single page table
   288                                  ;   that allows us to map up to 4Mb (although we'd likely only create PTEs for the first 1Mb).
   289                                  ;
   290                                  ;   However, the code to do that is currently disabled (see %ifdef RAM_GDT), because it's just as easy to define
   291                                  ;   the structures we need inside the .COM image and statically initialize them to the values assumed for ROM
   292                                  ;   operation.  For RAM operation, we tweak the structures as needed; the tweaks have no effect when loaded in ROM.
   293                                  ;
   294                                  ;RAM_GDT	equ	0x0c00
   295                                  ;RAM_IDTR	equ	0x0d00
   296                                  ;RAM_GDTR	equ	0x0d08
   297                                  ;RAM_RETF	equ	0x0d10
   298                                  ;
   299                                  
   300                                  CSEG_REAL	equ	0xf000
   301                                  CSEG_PROT16	equ	0x0008
   302                                  CSEG_PROT32	equ	0x0010
   303                                  DSEG_PROT16	equ	0x0018
   304                                  DSEG_PROT32	equ	0x0020
   305                                  SSEG_PROT32	equ	0x0028
   306                                  
   307                                  ;
   308                                  ;   We set our exception handlers at fixed addresses to simplify interrupt gate descriptor initialization.
   309                                  ;
   310                                  OFF_INTDIVERR	equ	0xe000
   311                                  
   312                                  ;
   313                                  ;   The "defGate" macro defines an interrupt gate, given a selector (%1) and an offset (%2)
   314                                  ;
   315                                  %macro	defGate	2
   316                                  	dw	(%2 & 0xffff)
   317                                  	dw	%1
   318                                  	dw	ACC_TYPE_GATE386_INT | ACC_PRESENT
   319                                  	dw	(%2 >> 16) & 0xffff
   320                                  %endmacro
   321                                  
   322                                  ;
   323                                  ;   The "defDesc" macro defines a descriptor, given a name (%1), base (%2), limit (%3), type (%4), and ext (%5)
   324                                  ;
   325                                  %assign	selDesc	0
   326                                  
   327                                  %macro	defDesc	1-5 0,0,0,0
   328                                  	%assign %1 selDesc
   329                                  	dw	(%3 & 0x0000ffff)
   330                                  	dw	(%2 & 0x0000ffff)
   331                                      %if selDesc = 0
   332                                  	dw	((%2 & 0x00ff0000) >> 16) | %4 | (0 << 13)
   333                                      %else
   334                                  	dw	((%2 & 0x00ff0000) >> 16) | %4 | (0 << 13) | ACC_PRESENT
   335                                      %endif
   336                                  	dw	((%3 & 0x000f0000) >> 16) | %5 | ((%2 & 0xff000000) >> 16)
   337                                  	%assign selDesc selDesc+8
   338                                  %endmacro
   339                                  
   340                                  ;
   341                                  ;   The "setDesc" macro creates a descriptor, given a name (%1), base (%2), limit (%3), type (%4), and ext (%5)
   342                                  ;
   343                                  %macro	setDesc 1-5 0,0,0,0
   344                                  	%assign %1 selDesc
   345                                  	set	ebx,%2
   346                                  	set	ecx,%3
   347                                  	set	dx,%4
   348                                  	set	ax,%5
   349                                  	call	storeDesc
   350                                  	%assign selDesc selDesc+8
   351                                  %endmacro
   352                                  
   353 00000000 90                      start:	nop
   354                                  ;
   355                                  ;   If we didn't CALL or PUSH anything on the stack AND we turned interrupts off, the top of our image would be
   356                                  ;   safe, but if we're running in RAM, we do issue a few DOS calls before switching into protected-mode and onto
   357                                  ;   a new stack, so we need to set SP to a safer location inside the .COM image.
   358                                  ;
   359 00000001 BC[3A80]                	mov	sp,tempStack
   360                                  ;
   361                                  ;   Quick tests of unsigned 32-bit multiplication and division
   362                                  ;
   363 00000004 66B801000080            	mov	eax,0x80000001
   364 0000000A 66F7E8                  	imul	eax
   365                                  
   366 0000000D 66B811223344            	mov	eax,0x44332211
   367 00000013 6689C3                  	mov	ebx,eax
   368 00000016 66B955667788            	mov	ecx,0x88776655
   369 0000001C 66F7E1                  	mul	ecx
   370 0000001F 66F7F1                  	div	ecx
   371 00000022 6639D8                  	cmp	eax,ebx
   372 00000025 0F855F8A                	jne	near error		; apparently we have to tell NASM v0.98.40 "near" for all long forward references
   373                                  
   374 00000029 31D2                    	xor	dx,dx
   375 0000002B 8EDA                    	mov	ds,dx			; DS -> 0x0000
   376                                  ;
   377                                  ;   Quick test of moving a segment register to a 32-bit register
   378                                  ;
   379 0000002D 668CD8                  	mov	eax,ds
   380 00000030 6685C0                  	test	eax,eax
   381 00000033 0F85518A                	jnz	near error
   382                                  
   383 00000037 E96C80                  	jmp	initGDT
   384 0000003A 90<rept>                	times	32768 nop		; lots of NOPs to test generation of 16-bit conditional jumps
   385                                  tempStack:
   386                                  ;
   387                                  ;   storeDesc(EBX=base, ECX=limit, DX=type, AX=ext, DI=address of descriptor)
   388                                  ;
   389                                  storeDesc:
   390 0000803A FC                      	cld
   391 0000803B 50                      	push	ax
   392 0000803C 89C8                    	mov	ax,cx
   393 0000803E AB                      	stosw				; store the low 16 bits of limit from ECX
   394 0000803F 89D8                    	mov	ax,bx
   395 00008041 AB                      	stosw				; store the low 16 bits of base from EBX
   396 00008042 89D0                    	mov	ax,dx
   397 00008044 66C1EB10                	shr	ebx,16
   398 00008048 88D8                    	mov	al,bl
   399 0000804A 0D0080                  	or	ax,ACC_PRESENT
   400 0000804D AB                      	stosw
   401 0000804E 58                      	pop	ax
   402 0000804F 66C1E910                	shr	ecx,16
   403 00008053 80E10F                  	and	cl,0xf
   404 00008056 08C8                    	or	al,cl
   405 00008058 88FC                    	mov	ah,bh
   406 0000805A AB                      	stosw
   407 0000805B C3                      	ret
   408                                  
   409 0000805C 2F00                    addrGDT:dw	myGDTEnd - myGDT - 1	; 16-bit limit of myGDT
   410 0000805E [6280]0F00              	dw	myGDT, 0x000f		; 32-bit base address of myGDT
   411                                  
   412                                  myGDT:	defDesc	NULL			; the first descriptor in any descriptor table is always a dud (it corresponds to the null selector)
   413                              <1> myGDT: 
   414                              <1>  %assign %1 selDesc
   415 00008062 0000                <1>  dw (%3 & 0x0000ffff)
   416 00008064 0000                <1>  dw (%2 & 0x0000ffff)
   417                              <1>  %if selDesc = 0
   418 00008066 0000                <1>  dw ((%2 & 0x00ff0000) >> 16) | %4 | (0 << 13)
   419                              <1>  %else
   420                              <1>  dw ((%2 & 0x00ff0000) >> 16) | %4 | (0 << 13) | ACC_PRESENT
   421                              <1>  %endif
   422 00008068 0000                <1>  dw ((%3 & 0x000f0000) >> 16) | %5 | ((%2 & 0xff000000) >> 16)
   423                              <1>  %assign selDesc selDesc+8
   424                                  	defDesc	CSEG_PROT16,0x000f0000,0x0000ffff,ACC_TYPE_CODE_READABLE,EXT_NONE
   425                              <1>  %assign %1 selDesc
   426 0000806A FFFF                <1>  dw (%3 & 0x0000ffff)
   427 0000806C 0000                <1>  dw (%2 & 0x0000ffff)
   428                              <1>  %if selDesc = 0
   429                              <1>  dw ((%2 & 0x00ff0000) >> 16) | %4 | (0 << 13)
   430                              <1>  %else
   431 0000806E 0F9A                <1>  dw ((%2 & 0x00ff0000) >> 16) | %4 | (0 << 13) | ACC_PRESENT
   432                              <1>  %endif
   433 00008070 0000                <1>  dw ((%3 & 0x000f0000) >> 16) | %5 | ((%2 & 0xff000000) >> 16)
   434                              <1>  %assign selDesc selDesc+8
   435                                  	defDesc	CSEG_PROT32,0x000f0000,0x0000ffff,ACC_TYPE_CODE_READABLE,EXT_BIG
   436                              <1>  %assign %1 selDesc
   437 00008072 FFFF                <1>  dw (%3 & 0x0000ffff)
   438 00008074 0000                <1>  dw (%2 & 0x0000ffff)
   439                              <1>  %if selDesc = 0
   440                              <1>  dw ((%2 & 0x00ff0000) >> 16) | %4 | (0 << 13)
   441                              <1>  %else
   442 00008076 0F9A                <1>  dw ((%2 & 0x00ff0000) >> 16) | %4 | (0 << 13) | ACC_PRESENT
   443                              <1>  %endif
   444 00008078 4000                <1>  dw ((%3 & 0x000f0000) >> 16) | %5 | ((%2 & 0xff000000) >> 16)
   445                              <1>  %assign selDesc selDesc+8
   446                                  	defDesc	DSEG_PROT16,0x00000000,0x000fffff,ACC_TYPE_DATA_WRITABLE,EXT_NONE
   447                              <1>  %assign %1 selDesc
   448 0000807A FFFF                <1>  dw (%3 & 0x0000ffff)
   449 0000807C 0000                <1>  dw (%2 & 0x0000ffff)
   450                              <1>  %if selDesc = 0
   451                              <1>  dw ((%2 & 0x00ff0000) >> 16) | %4 | (0 << 13)
   452                              <1>  %else
   453 0000807E 0092                <1>  dw ((%2 & 0x00ff0000) >> 16) | %4 | (0 << 13) | ACC_PRESENT
   454                              <1>  %endif
   455 00008080 0F00                <1>  dw ((%3 & 0x000f0000) >> 16) | %5 | ((%2 & 0xff000000) >> 16)
   456                              <1>  %assign selDesc selDesc+8
   457                                  	defDesc	DSEG_PROT32,0x00000000,0x000fffff,ACC_TYPE_DATA_WRITABLE,EXT_BIG
   458                              <1>  %assign %1 selDesc
   459 00008082 FFFF                <1>  dw (%3 & 0x0000ffff)
   460 00008084 0000                <1>  dw (%2 & 0x0000ffff)
   461                              <1>  %if selDesc = 0
   462                              <1>  dw ((%2 & 0x00ff0000) >> 16) | %4 | (0 << 13)
   463                              <1>  %else
   464 00008086 0092                <1>  dw ((%2 & 0x00ff0000) >> 16) | %4 | (0 << 13) | ACC_PRESENT
   465                              <1>  %endif
   466 00008088 4F00                <1>  dw ((%3 & 0x000f0000) >> 16) | %5 | ((%2 & 0xff000000) >> 16)
   467                              <1>  %assign selDesc selDesc+8
   468                                  	defDesc	SSEG_PROT32,0x00010000,0x000effff,ACC_TYPE_DATA_WRITABLE,EXT_BIG
   469                              <1>  %assign %1 selDesc
   470 0000808A FFFF                <1>  dw (%3 & 0x0000ffff)
   471 0000808C 0000                <1>  dw (%2 & 0x0000ffff)
   472                              <1>  %if selDesc = 0
   473                              <1>  dw ((%2 & 0x00ff0000) >> 16) | %4 | (0 << 13)
   474                              <1>  %else
   475 0000808E 0192                <1>  dw ((%2 & 0x00ff0000) >> 16) | %4 | (0 << 13) | ACC_PRESENT
   476                              <1>  %endif
   477 00008090 4E00                <1>  dw ((%3 & 0x000f0000) >> 16) | %5 | ((%2 & 0xff000000) >> 16)
   478                              <1>  %assign selDesc selDesc+8
   479                                  myGDTEnd:
   480                                  
   481 00008092 0700                    addrIDT:dw	myIDTEnd - myIDT - 1	; 16-bit limit of myIDT
   482 00008094 [9880]0F00              	dw	myIDT, 0x000f		; 32-bit base address of myIDT
   483                                  
   484                                  myIDT:	defGate	CSEG_PROT32,OFF_INTDIVERR
   485                              <1> myIDT: 
   486 00008098 00E0                <1>  dw (%2 & 0xffff)
   487 0000809A 1000                <1>  dw %1
   488 0000809C 008E                <1>  dw ACC_TYPE_GATE386_INT | ACC_PRESENT
   489 0000809E 0000                <1>  dw (%2 >> 16) & 0xffff
   490                                  myIDTEnd:
   491                                  
   492                                  addrIDTReal:
   493 000080A0 FF03                    	dw	0x3FF			; 16-bit limit of real-mode IDT
   494 000080A2 00000000                	dd	0x00000000		; 32-bit base address of real-mode IDT
   495                                  
   496                                  initGDT:
   497                                      %ifdef RAM_GDT
   498                                  	set	edi,RAM_GDT
   499                                  	mov	[RAM_GDTR+2],edi
   500                                  	setDesc	NULL
   501                                  	xor	eax,eax
   502                                  	mov	ax,cs
   503                                  	shl	eax,4
   504                                  	setDesc	CSEG_PROT16,eax,0x0000ffff,ACC_TYPE_CODE_READABLE,EXT_NONE
   505                                  	setDesc	CSEG_PROT32,eax,0x0000ffff,ACC_TYPE_CODE_READABLE,EXT_BIG
   506                                  	setDesc	DSEG_PROT16,0x00000000,0x000fffff,ACC_TYPE_DATA_WRITABLE,EXT_NONE
   507                                  	setDesc	DSEG_PROT32,0x00000000,0x000fffff,ACC_TYPE_DATA_WRITABLE,EXT_BIG
   508                                  	setDesc	SSEG_PROT32,0x00010000,0x000effff,ACC_TYPE_DATA_WRITABLE,EXT_BIG
   509                                  	sub	edi,RAM_GDT
   510                                  	dec	edi
   511                                  	mov	[RAM_GDTR],di
   512                                  	mov	word [RAM_RETF],toReal
   513                                  	mov	word [RAM_RETF+2],cs
   514                                      %else
   515                                  ;
   516                                  ;   This code fixes the GDT and all our far jumps if we're running in RAM
   517                                  ;
   518 000080A6 6631C0                      	xor	eax,eax
   519 000080A9 8CC8                    	mov	ax,cs
   520 000080AB 66C1E004                	shl	eax,4				; EAX == base address of the current CS
   521 000080AF 6689C2                  	mov	edx,eax				; save it in EDX
   522 000080B2 2EA3[6C80]              	mov	[cs:myGDT+CSEG_PROT16+2],ax	; update the base portions of the descriptor for CSEG_PROT16 and CSEG_PROT32
   523 000080B6 2EA3[7480]              	mov	[cs:myGDT+CSEG_PROT32+2],ax
   524 000080BA 66C1E810                	shr	eax,16
   525 000080BE 2EA2[6E80]              	mov	[cs:myGDT+CSEG_PROT16+4],al
   526 000080C2 2EA2[7680]              	mov	[cs:myGDT+CSEG_PROT32+4],al
   527 000080C6 2E8826[7180]            	mov	[cs:myGDT+CSEG_PROT16+7],ah
   528 000080CB 2E8826[7980]            	mov	[cs:myGDT+CSEG_PROT32+7],ah
   529 000080D0 6689D0                  	mov	eax,edx				; recover the base address of the current CS
   530 000080D3 6605[62800000]          	add	eax,myGDT			; EAX == physical address of myGDT
   531 000080D9 2E66A3[5E80]            	mov	[cs:addrGDT+2],eax		; update the 32-bit base address of myGDT in addrGDT
   532 000080DE 6689D0                  	mov	eax,edx				; recover the base address of the current CS again
   533 000080E1 6605[98800000]          	add	eax,myIDT			; EAX == physical address of myIDT
   534 000080E7 2E66A3[9480]            	mov	[cs:addrIDT+2],eax		; update the 32-bit base address of myIDT in addrIDT
   535 000080EC 8CC8                    	mov	ax,cs
   536                                        %ifdef REAL32
   537                                  	mov	[cs:jmpReal+5],ax		; update the segment of the FAR jump that returns us to real-mode
   538                                        %else
   539 000080EE 2EA3[3FDF]              	mov	[cs:jmpReal+3],ax
   540                                        %endif
   541 000080F2 2EA3[F3FE]              	mov	[cs:jmpStart+3],ax		; ditto for the FAR jump that returns us to the start of the image
   542                                      %endif
   543                                  ;
   544                                  ;   Now we want to build a page directory and a page table, but we need two pages of
   545                                  ;   4K-aligned physical memory.  We can use a hard-coded address (segment 0x100, corresponding
   546                                  ;   to physical address 0x1000) if we're running in ROM; otherwise, we ask DOS for some memory.
   547                                  ;
   548 000080F6 3D00F0                      	cmp	ax,CSEG_REAL
   549 000080F9 B80001                      	mov	ax,0x100			; default to the 2nd physical page in low memory
   550 000080FC 7431                        	je	initPages
   551                                  
   552 000080FE BB0010                      	mov	bx,0x1000			; 4K paragraphs == 64K bytes
   553 00008101 B44A                        	mov	ah,DOS_SETBLOCK			; resize the current block so we can allocate a new block
   554 00008103 CD21                        	int	INT_DOS
   555 00008105 731F                        	jnc	allocPages
   556                                  
   557                                  exitErrDOSMem:
   558 00008107 BA[1081]                    	mov	dx,errDOSMem
   559                                  
   560                                  exitErrDOS:
   561 0000810A B409                    	mov	ah,DOS_STD_CON_STRING_OUTPUT
   562 0000810C CD21                    	int	INT_DOS
   563 0000810E CD20                    	int	INT_DOSEXIT
   564                                  
   565                                  errDOSMem:
   566 00008110 496E73756666696369-     	db     "Insufficient memory",CR,LF,'$'
   567 00008119 656E74206D656D6F72-
   568 00008122 790D0A24           
   569                                  
   570                                  allocPages:
   571 00008126 BB0020                  	mov	bx,0x2000			; 8K paragraphs == 128K bytes
   572 00008129 B448                    	mov	ah,DOS_ALLOC
   573 0000812B CD21                    	int	INT_DOS
   574 0000812D 72E1                    	jc	errDOSMem
   575                                  ;
   576                                  ;   AX == segment of 64K memory block
   577                                  ;
   578                                  initPages:
   579 0000812F 660FB7C0                    	movzx	eax,ax
   580 00008133 66C1E004                    	shl	eax,4
   581 00008137 6605FF0F0000                	add	eax,0xfff
   582 0000813D 662500F0FFFF                	and	eax,~0xfff
   583 00008143 6689C6                  	mov	esi,eax				; ESI == first physical 4K-aligned page within the given segment
   584 00008146 66C1E804                    	shr	eax,4
   585 0000814A 8EC0                        	mov	es,ax
   586 0000814C 6631FF                      	xor	edi,edi
   587                                  ;
   588                                  ;   Build a page directory at ES:EDI with only 1 valid PDE (the first one),
   589                                  ;   because we're not going to access any memory outside the first 1Mb (of the first 4Mb).
   590                                  ;
   591 0000814F FC                      	cld
   592 00008150 6689F0                  	mov	eax,esi
   593 00008153 660500100000            	add	eax,0x1000			; EAX == page frame address (of the next page)
   594 00008159 660D07000000            	or	eax,PTE_USER | PTE_READWRITE | PTE_PRESENT
   595 0000815F 66AB                    	stosd
   596 00008161 66B9FF030000                	mov	ecx,1024-1			; ECX == number of (remaining) PDEs to write
   597 00008167 6629C0                      	sub	eax,eax
   598 0000816A F366AB                  	rep	stosd
   599                                  ;
   600                                  ;   Build a page table at EDI with 256 (out of 1024) valid PTEs, mapping the first 1Mb of the
   601                                  ;   first 4Mb as linear == physical.
   602                                  ;
   603 0000816D 66B807000000            	mov	eax,PTE_USER | PTE_READWRITE | PTE_PRESENT
   604 00008173 66B900010000                	mov	ecx,256				; ECX == number of PTEs to write
   605 00008179 66AB                    initPT:	stosd
   606 0000817B 660500100000            	add	eax,0x1000
   607 00008181 E2F6                    	loop	initPT
   608 00008183 66B900030000                	mov	ecx,1024-256			; ECX == number of (remaining) PTEs to write
   609 00008189 6629C0                      	sub	eax,eax
   610 0000818C F366AB                      	rep	stosd
   611                                  
   612                                  goProt:
   613 0000818F FA                      	cli					; make sure interrupts are off now, since we've not initialized the IDT yet
   614 00008190 662E0F011E[9280]        	o32 lidt [cs:addrIDT]
   615 00008197 662E0F0116[5C80]        	o32 lgdt [cs:addrGDT]
   616 0000819E 0F22DE                  	mov	cr3,esi
   617 000081A1 0F20C0                  	mov	eax,cr0
   618                                      %if PAGING
   619 000081A4 660D01000080            	or	eax,CR0_MSW_PE | CR0_PG
   620                                      %else
   621                                  	or	eax,CR0_MSW_PE
   622                                      %endif
   623 000081AA 0F22C0                  	mov	cr0,eax
   624 000081AD EA[B281]1000            	jmp	CSEG_PROT32:toProt32
   625                                  
   626                                  toProt32:
   627                                  	bits	32
   628                                  
   629 000081B2 66B81800                	mov	ax,DSEG_PROT16
   630 000081B6 8ED8                    	mov	ds,ax
   631 000081B8 8EC0                    	mov	es,ax
   632                                  ;
   633                                  ;   Of the 128Kb of scratch memory we allocated, we may have lost as much as 4Kb-1 rounding
   634                                  ;   up to the first physical 4Kb page; the next 8Kb (0x2000) was used for a page directory and a
   635                                  ;   single page table, leaving us with a minimum of 116Kb to play with, starting at ESI+0x2000.
   636                                  ;
   637                                  ;   We'll set the top of our stack to ESI+0xe000.  This guarantees an ESP greater than 0xffff,
   638                                  ;   and so for the next few tests, with a 16-bit data segment in SS, we expect all pushes/pops
   639                                  ;   will occur at SP rather than ESP.
   640                                  ;
   641 000081BA 81C600200000            	add	esi,0x2000			; ESI -> bottom of scratch memory
   642 000081C0 8ED0                    	mov	ss,ax
   643 000081C2 8DA600E00000            	lea	esp,[esi+0xe000]		; set ESP to bottom of scratch + 56K
   644 000081C8 8D6C24FC                	lea	ebp,[esp-4]
   645 000081CC 81E5FFFF0000            	and	ebp,0xffff			; EBP now mirrors SP instead of ESP
   646 000081D2 8B5500                  	mov	edx,[ebp]			; save dword about to be trashed by pushes
   647 000081D5 B844332211              	mov	eax,0x11223344
   648 000081DA 50                      	push	eax
   649 000081DB 394500                  	cmp	[ebp],eax			; did the push use SP instead of ESP?
   650 000081DE 0F85A4080000            	jne	near error			; no, error
   651 000081E4 58                      	pop	eax
   652 000081E5 6650                    	push	ax
   653 000081E7 66394502                	cmp	[ebp+2],ax
   654 000081EB 0F8597080000            	jne	near error
   655 000081F1 6658                    	pop	ax
   656 000081F3 895500                  	mov	[ebp],edx			; restore dword trashed by the above pushes
   657 000081F6 66B82000                	mov	ax,DSEG_PROT32
   658 000081FA 8ED0                    	mov	ss,ax
   659 000081FC 8DA600E00000            	lea	esp,[esi+0xe000]		; SS:ESP should now be a valid 32-bit pointer
   660 00008202 8D6C24FC                	lea	ebp,[esp-4]
   661 00008206 8B5500                  	mov	edx,[ebp]
   662 00008209 B844332211              	mov	eax,0x11223344
   663 0000820E 50                      	push	eax
   664 0000820F 394500                  	cmp	[ebp],eax			; did the push use ESP instead of SP?
   665 00008212 0F8570080000            	jne	near error			; no, error
   666 00008218 58                      	pop	eax
   667 00008219 6650                    	push	ax
   668 0000821B 66394502                	cmp	[ebp+2],ax
   669 0000821F 0F8563080000            	jne	near error
   670 00008225 6658                    	pop	ax
   671                                  ;
   672                                  ;   Test moving a segment register to a 32-bit memory location
   673                                  ;
   674 00008227 8B1500000000            	mov	edx,[0x0000]			; save the DWORD at 0x0000:0x0000 in EDX
   675 0000822D 0DFFFFFFFF              	or	eax,-1
   676 00008232 A300000000              	mov	[0x0000],eax
   677 00008237 8C1D00000000            	mov	[0x0000],ds
   678 0000823D 668CD8                  	mov	ax,ds
   679 00008240 3B0500000000            	cmp	eax,[0x0000]
   680 00008246 0F853C080000            	jne	near error
   681 0000824C 8CD8                    	mov	eax,ds
   682 0000824E 350000FFFF              	xor	eax,0xffff0000
   683 00008253 3B0500000000            	cmp	eax,[0x0000]
   684 00008259 0F8529080000            	jne	near error
   685 0000825F 891500000000            	mov	[0x0000],edx			; restore the DWORD at 0x0000:0x0000 from EDX
   686                                  ;
   687                                  ;   Test moving a byte to a 32-bit register with sign-extension
   688                                  ;
   689 00008265 2E0FBE05[F6FE0000]      	movsx	eax,byte [cs:signedByte]
   690 0000826D 3D80FFFFFF              	cmp	eax,0xffffff80
   691 00008272 0F8510080000            	jne	near error
   692                                  ;
   693                                  ;   Test moving a word to a 32-bit register with sign-extension
   694                                  ;
   695 00008278 2E0FBF05[F5FE0000]      	movsx	eax,word [cs:signedWord]
   696 00008280 3D8080FFFF              	cmp	eax,0xffff8080
   697 00008285 0F85FD070000            	jne	near error
   698                                  ;
   699                                  ;   Test moving a byte to a 32-bit register with zero-extension
   700                                  ;
   701 0000828B 2E0FB605[F6FE0000]      	movzx	eax,byte [cs:signedByte]
   702 00008293 3D80000000              	cmp	eax,0x00000080
   703 00008298 0F85EA070000            	jne	near error
   704                                  ;
   705                                  ;   Test moving a word to a 32-bit register with zero-extension
   706                                  ;
   707 0000829E 2E0FB705[F5FE0000]      	movzx	eax,word [cs:signedWord]
   708 000082A6 3D80800000              	cmp	eax,0x00008080
   709 000082AB 0F85D7070000            	jne	near error
   710                                  ;
   711                                  ;   More assorted zero and sign-extension tests
   712                                  ;
   713 000082B1 BC00000400                  	mov	esp,0x40000
   714 000082B6 8B1424                      	mov	edx,[esp]			; save word at scratch address 0x40000
   715 000082B9 81C404000000                	add	esp,4
   716 000082BF 6A80                        	push	byte -128			; NASM will not use opcode 0x6A ("PUSH imm8") unless we specify "byte"
   717 000082C1 5B                          	pop	ebx				; verify EBX == 0xFFFFFF80
   718 000082C2 81FB80FFFFFF                	cmp	ebx,0xFFFFFF80
   719 000082C8 0F85BA070000                	jne	near error
   720 000082CE 81E3FF000000                	and	ebx,0xff			; verify EBX == 0x00000080
   721 000082D4 81FB80000000                	cmp	ebx,0x00000080
   722 000082DA 0F85A8070000                	jne	near error
   723 000082E0 660FBEDB                    	movsx	bx,bl				; verify EBX == 0x0000FF80
   724 000082E4 81FB80FF0000                	cmp	ebx,0x0000FF80
   725 000082EA 0F8598070000                	jne	near error
   726 000082F0 0FBFDB                      	movsx	ebx,bx				; verify EBX == 0xFFFFFF80
   727 000082F3 81FB80FFFFFF                	cmp	ebx,0xFFFFFF80
   728 000082F9 0F8589070000                	jne	near error
   729 000082FF 660FB6DB                    	movzx	bx,bl				; verify EBX == 0xFFFF0080
   730 00008303 81FB8000FFFF                	cmp	ebx,0xFFFF0080
   731 00008309 0F8579070000                	jne	near error
   732 0000830F 0FB6DB                      	movzx	ebx,bl				; verify EBX == 0x00000080
   733 00008312 81FB80000000                	cmp	ebx,0x00000080
   734 00008318 0F856A070000                	jne	near error
   735 0000831E F7D3                        	not	ebx				; verify EBX == 0xFFFFFF7F
   736 00008320 81FB7FFFFFFF                	cmp	ebx,0xFFFFFF7F
   737 00008326 0F855C070000                	jne	near error
   738 0000832C 660FBEDB                    	movsx	bx,bl				; verify EBX == 0xFFFF007F
   739 00008330 81FB7F00FFFF                	cmp	ebx,0xFFFF007F
   740 00008336 0F854C070000                	jne	near error
   741 0000833C 0FBEDB                      	movsx	ebx,bl				; verify EBX == 0x0000007F
   742 0000833F 81FB7F000000                	cmp	ebx,0x0000007F
   743 00008345 0F853D070000                	jne	near error
   744 0000834B F7D3                        	not	ebx				; verify EBX == 0xFFFFFF80
   745 0000834D 81FB80FFFFFF                	cmp	ebx,0xFFFFFF80
   746 00008353 0F852F070000                	jne	near error
   747 00008359 0FB7DB                      	movzx	ebx,bx				; verify EBX == 0x0000FF80
   748 0000835C 81FB80FF0000                	cmp	ebx,0x0000FF80
   749 00008362 0F8520070000                	jne	near error
   750 00008368 660FB6DB                    	movzx	bx,bl				; verify EBX == 0x00000080
   751 0000836C 81FB80000000                	cmp	ebx,0x00000080
   752 00008372 0F8510070000                	jne	near error
   753 00008378 660FBEDB                    	movsx	bx,bl
   754 0000837C 66F7DB                      	neg	bx
   755 0000837F 66F7DB                      	neg	bx
   756 00008382 81FB80FF0000                	cmp	ebx,0x0000FF80
   757 00008388 0F85FA060000                	jne	near error
   758 0000838E 0FBFDB                      	movsx	ebx,bx
   759 00008391 F7DB                        	neg	ebx
   760 00008393 F7DB                        	neg	ebx
   761 00008395 81FB80FFFFFF                	cmp	ebx,0xFFFFFF80
   762 0000839B 0F85E7060000                	jne	near error
   763                                  ;
   764                                  ;   Test assorted 32-bit addressing modes
   765                                  ;
   766 000083A1 66B82800                    	mov	ax,SSEG_PROT32			; we want SS != DS for the next tests
   767 000083A5 8ED0                        	mov	ss,ax
   768                                  
   769 000083A7 B844332211                  	mov	eax,0x11223344
   770 000083AC A300000400                  	mov	[0x40000],eax			; store a known word at the scratch address
   771                                  
   772 000083B1 B900000400                  	mov	ecx,0x40000			; now access that scratch address using various addressing modes
   773 000083B6 3901                        	cmp	[ecx],eax
   774 000083B8 0F85CA060000                	jne	near error
   775                                  
   776 000083BE 81C140000000                	add	ecx,64
   777 000083C4 3941C0                      	cmp	[ecx-64],eax
   778 000083C7 0F85BB060000                	jne	near error
   779 000083CD 81E940000000                	sub	ecx,64
   780                                  
   781 000083D3 D1E9                        	shr	ecx,1
   782 000083D5 398100000200                	cmp	[ecx+0x20000],eax
   783 000083DB 0F85A7060000                	jne	near error
   784                                  
   785 000083E1 390409                      	cmp	[ecx+ecx],eax
   786 000083E4 0F859E060000                	jne	near error
   787                                  
   788 000083EA D1E9                        	shr	ecx,1
   789 000083EC 39844900000100              	cmp	[ecx+ecx*2+0x10000],eax
   790 000083F3 0F858F060000                	jne	near error
   791                                  
   792 000083F9 39048D00000000              	cmp	[ecx*4],eax
   793 00008400 0F8582060000                	jne	near error
   794                                  
   795 00008406 89CD                        	mov	ebp,ecx
   796 00008408 39844D00000100              	cmp	[ebp+ecx*2+0x10000],eax
   797 0000840F 0F8473060000                	je	near error			; since SS != DS, this better be a mismatch
   798                                  
   799 00008415 891500000400            	mov	[0x40000],edx			; restore word at scratch address 0x40000
   800                                  ;
   801                                  ;   Now run a series of unverified opcode tests (verification will happen later, by comparing the output of the tests)
   802                                  ;
   803 0000841B FC                      	cld
   804 0000841C BE[AA850000]            	mov	esi,tableOps			; ESI -> tableOps entry
   805                                  testOps:
   806 00008421 2E0FB60E                	movzx	ecx,byte [cs:esi]		; ECX == length of instruction sequence
   807 00008425 85C9                    	test	ecx,ecx				; (must use JZ since there's no long version of JECXZ)
   808 00008427 0F8485000000            	jz	near testDone			; zero means we've reached the end of the table
   809 0000842D 2E0FB65E01              	movzx	ebx,byte [cs:esi+1]		; EBX == TYPE
   810 00008432 C1E306                  	shl	ebx,6				; EBX == TYPE * 64
   811 00008435 2E0FB65602              	movzx	edx,byte [cs:esi+2]		; EDX == SIZE
   812 0000843A C1E204                  	shl	edx,4				; EDX == SIZE * 16
   813 0000843D 2E8D9C13[48890000]      	lea	ebx,[cs:typeValues+ebx+edx]	; EBX -> values for type
   814 00008445 81C603000000            	add	esi,3				; ESI -> instruction mnemonic
   815 0000844B 2EAC                    .skip:	cs lodsb
   816 0000844D 84C0                    	test	al,al
   817 0000844F 75FA                    	jnz	.skip
   818                                  
   819 00008451 51                      	push	ecx
   820 00008452 2E8B0B                  	mov	ecx,[cs:ebx]			; ECX == count of values for dst
   821 00008455 2E8B4304                	mov	eax,[cs:ebx+4]			; EAX -> values for dst
   822 00008459 2E8B6B08                	mov	ebp,[cs:ebx+8]			; EBP == count of values for src
   823 0000845D 2E8B7B0C                	mov	edi,[cs:ebx+12]			; EDI -> values for src
   824 00008461 93                      	xchg	ebx,eax				; EBX -> values for dst
   825 00008462 29C0                    	sub	eax,eax				; set all ARITH flags to known values prior to tests
   826                                  testDst:
   827 00008464 55                      	push	ebp
   828 00008465 57                      	push	edi
   829 00008466 9C                      	pushfd
   830                                  testSrc:
   831 00008467 2E8B03                  	mov	eax,[cs:ebx]			; EAX == dst
   832 0000846A 2E8B17                  	mov	edx,[cs:edi]			; EDX == src
   833 0000846D 9D                      	popfd
   834 0000846E E844000000              	call	printOp
   835 00008473 E868000000              	call	printEAX
   836 00008478 E879000000              	call	printEDX
   837 0000847D E88C000000              	call	printPS
   838 00008482 FFD6                    	call	esi				; execute the instruction sequence
   839 00008484 E857000000              	call	printEAX
   840 00008489 E868000000              	call	printEDX
   841 0000848E E87B000000              	call	printPS
   842 00008493 E8A6000000              	call	printEOL
   843 00008498 9C                      	pushfd
   844 00008499 81C704000000            	add	edi,4				; EDI -> next src
   845 0000849F 4D                      	dec	ebp				; decrement src count
   846 000084A0 75C5                    	jnz	testSrc
   847                                  
   848 000084A2 9D                      	popfd
   849 000084A3 5F                      	pop	edi				; ESI -> restored values for src
   850 000084A4 5D                      	pop	ebp				; EBP == restored count of values for src
   851 000084A5 8D5B04                  	lea	ebx,[ebx+4]			; EBX -> next dst (without modifying flags)
   852 000084A8 E2BA                    	loop	testDst
   853                                  
   854 000084AA 59                      	pop	ecx
   855 000084AB 01CE                    	add	esi,ecx				; ESI -> next tableOps entry
   856 000084AD E96FFFFFFF              	jmp	testOps
   857                                  
   858                                  testDone:
   859 000084B2 E9625A0000              	jmp	doneProt
   860                                  
   861                                  ;
   862                                  ;   printOp(ESI -> instruction sequence)
   863                                  ;
   864                                  ;   Rewinds ESI to the start of the mnemonic preceding the instruction sequence and prints the mnemonic
   865                                  ;
   866                                  ;   Uses: None
   867                                  ;
   868                                  printOp:
   869 000084B7 9C                      	pushfd
   870 000084B8 60                      	pushad
   871                                  .findSize:
   872 000084B9 4E                      	dec	esi
   873 000084BA 2E8A46FF                	mov	al,[cs:esi-1]
   874 000084BE 3C20                    	cmp	al,32
   875 000084C0 73F7                    	jae	.findSize
   876 000084C2 E896000000              	call	printStr
   877 000084C7 0FB6C0                  	movzx	eax,al
   878 000084CA 2E8A80[A7850000]        	mov	al,[cs:achSize+eax]
   879 000084D1 E872000000              	call	printChar
   880 000084D6 B020                    	mov	al,' '
   881 000084D8 E86B000000              	call	printChar
   882 000084DD 61                      	popad
   883 000084DE 9D                      	popfd
   884 000084DF C3                      	ret
   885                                  
   886                                  ;
   887                                  ;   printEAX()
   888                                  ;
   889                                  ;   Uses: None
   890                                  ;
   891                                  printEAX:
   892 000084E0 9C                      	pushfd
   893 000084E1 60                      	pushad
   894 000084E2 BE[94850000]            	mov	esi,strEAX
   895 000084E7 E871000000              	call	printStr
   896 000084EC B108                    	mov	cl,8
   897 000084EE E87A000000              	call	printVal
   898 000084F3 61                      	popad
   899 000084F4 9D                      	popfd
   900 000084F5 C3                      	ret
   901                                  
   902                                  ;
   903                                  ;   printEDX()
   904                                  ;
   905                                  ;   Uses: None
   906                                  ;
   907                                  printEDX:
   908 000084F6 9C                      	pushfd
   909 000084F7 60                      	pushad
   910 000084F8 BE[99850000]            	mov	esi,strEDX
   911 000084FD E85B000000              	call	printStr
   912 00008502 B108                    	mov	cl,8
   913 00008504 89D0                    	mov	eax,edx
   914 00008506 E862000000              	call	printVal
   915 0000850B 61                      	popad
   916 0000850C 9D                      	popfd
   917 0000850D C3                      	ret
   918                                  
   919                                  ;
   920                                  ;   printPS(ESI -> instruction sequence)
   921                                  ;
   922                                  ;   Uses: None
   923                                  ;
   924                                  printPS:
   925 0000850E 9C                      	pushfd
   926 0000850F 60                      	pushad
   927 00008510 9C                      	pushfd
   928 00008511 5A                      	pop	edx
   929                                  .findType:
   930 00008512 4E                      	dec	esi
   931 00008513 2E8A46FF                	mov	al,[cs:esi-1]
   932 00008517 3C20                    	cmp	al,32
   933 00008519 73F7                    	jae	.findType
   934 0000851B 2E0FB646FE              	movzx	eax,byte [cs:esi-2]
   935 00008520 2E231485[38880000]      	and	edx,[cs:typeMasks+eax*4]
   936 00008528 BE[9E850000]            	mov	esi,strPS
   937 0000852D E82B000000              	call	printStr
   938 00008532 B104                    	mov	cl,4
   939 00008534 89D0                    	mov	eax,edx
   940 00008536 E832000000              	call	printVal
   941 0000853B 61                      	popad
   942 0000853C 9D                      	popfd
   943 0000853D C3                      	ret
   944                                  
   945                                  ;
   946                                  ;   printEOL()
   947                                  ;
   948                                  ;   Uses: None
   949                                  ;
   950                                  printEOL:
   951 0000853E 50                      	push	eax
   952                                  ;	mov	al,0x0d
   953                                  ;	call	printChar
   954 0000853F B00A                    	mov	al,0x0a
   955 00008541 E802000000              	call	printChar
   956 00008546 58                      	pop	eax
   957 00008547 C3                      	ret
   958                                  
   959                                  ;
   960                                  ;   printChar(AL)
   961                                  ;
   962                                  ;   Uses: None
   963                                  ;
   964                                  printChar:
   965 00008548 9C                      	pushfd
   966 00008549 52                      	push	edx
   967 0000854A 50                      	push	eax
   968 0000854B 66BAFD02                	mov	dx,0x2FD			; EDX == COM2 LSR (Line Status Register)
   969 0000854F EC                      .loop:	in	al,dx				;
   970 00008550 A820                    	test	al,0x20				; THR (Transmitter Holding Register) empty?
   971 00008552 74FB                    	jz	.loop				; no
   972 00008554 58                      	pop	eax
   973 00008555 66BAF802                	mov	dx,0x2F8			; EDX -> COM2 THR (Transmitter Holding Register)
   974 00008559 EE                      	out	dx,al
   975 0000855A 5A                      	pop	edx
   976 0000855B 9D                      	popfd
   977 0000855C C3                      	ret
   978                                  
   979                                  ;
   980                                  ;   printStr(ESI -> zero-terminated string)
   981                                  ;
   982                                  ;   Uses: ESI, Flags
   983                                  ;
   984                                  printStr:
   985 0000855D 50                      	push	eax
   986 0000855E 2EAC                    .loop:	cs lodsb
   987 00008560 84C0                    	test	al,al
   988 00008562 7407                    	jz	.done
   989 00008564 E8DFFFFFFF              	call	printChar
   990 00008569 EBF3                    	jmp	.loop
   991 0000856B 58                      .done:	pop	eax
   992 0000856C C3                      	ret
   993                                  
   994                                  ;
   995                                  ;   printVal(EAX == value, CL == number of hex digits)
   996                                  ;
   997                                  ;   Uses: EAX, ECX, Flags
   998                                  ;
   999                                  printVal:
  1000 0000856D C0E102                  	shl	cl,2				; CL == number of bits (4 times the number of hex digits)
  1001 00008570 741A                    	jz	.done
  1002 00008572 80E904                  .loop:	sub	cl,4
  1003 00008575 50                      	push	eax
  1004 00008576 D3E8                    	shr	eax,cl
  1005 00008578 240F                    	and	al,0x0f
  1006 0000857A 0430                    	add	al,'0'
  1007 0000857C 3C39                    	cmp	al,'9'
  1008 0000857E 7602                    	jbe	.digit
  1009 00008580 0407                    	add	al,'A'-'0'-10
  1010 00008582 E8C1FFFFFF              .digit:	call	printChar
  1011 00008587 58                      	pop	eax
  1012 00008588 84C9                    	test	cl,cl
  1013 0000858A 75E6                    	jnz	.loop
  1014 0000858C B020                    .done:	mov	al,' '
  1015 0000858E E8B5FFFFFF              	call	printChar
  1016 00008593 C3                      	ret
  1017                                  
  1018                                  TYPE_ARITH	equ	0
  1019                                  TYPE_ARITH1	equ	1
  1020                                  TYPE_LOGIC	equ	2
  1021                                  TYPE_MULTIPLY	equ	3
  1022                                  TYPE_DIVIDE	equ	4
  1023                                  
  1024                                  SIZE_BYTE	equ	0
  1025                                  SIZE_SHORT	equ	1
  1026                                  SIZE_LONG	equ	2
  1027                                  
  1028                                  %macro	defOp	6
  1029                                      %ifidni %3,al
  1030                                  	%assign size SIZE_BYTE
  1031                                      %elifidni %3,dl
  1032                                  	%assign size SIZE_BYTE
  1033                                      %elifidni %3,ax
  1034                                  	%assign size SIZE_SHORT
  1035                                      %elifidni %3,dx
  1036                                  	%assign size SIZE_SHORT
  1037                                      %else
  1038                                  	%assign size SIZE_LONG
  1039                                      %endif
  1040                                  	db	%%end-%%beg,%6,size
  1041                                  %%name:
  1042                                  	db	%1,0
  1043                                  %%beg:
  1044                                      %ifidni %4,none
  1045                                  	%2	%3
  1046                                      %elifidni %5,none
  1047                                  	%2	%3,%4
  1048                                      %else
  1049                                  	%2	%3,%4,%5
  1050                                      %endif
  1051                                  	ret
  1052                                  %%end:
  1053                                  %endmacro
  1054                                  
  1055 00008594 4541583D00              strEAX:	db	"EAX=",0
  1056 00008599 4544583D00              strEDX:	db	"EDX=",0
  1057 0000859E 50533D00                strPS:	db	"PS=",0
  1058 000085A2 2344452000              strDE:	db	"#DE ",0			; when this is displayed, it indicates a Divide Error exception
  1059 000085A7 425744                  achSize	db	"BWD"
  1060                                  
  1061                                  ALLOPS equ 1
  1062                                  
  1063                                  tableOps:
  1064                                  	defOp	"ADD",add,al,dl,none,TYPE_ARITH
  1065                              <1>  %ifidni %3,al
  1066                              <1>  %assign size SIZE_BYTE
  1067                              <1>  %elifidni %3,dl
  1068                              <1>  %assign size SIZE_BYTE
  1069                              <1>  %elifidni %3,ax
  1070                              <1>  %assign size SIZE_SHORT
  1071                              <1>  %elifidni %3,dx
  1072                              <1>  %assign size SIZE_SHORT
  1073                              <1>  %else
  1074                              <1>  %assign size SIZE_LONG
  1075                              <1>  %endif
  1076 000085AA 030000              <1>  db %%end-%%beg,%6,size
  1077                              <1> %%name:
  1078 000085AD 41444400            <1>  db %1,0
  1079                              <1> %%beg:
  1080                              <1>  %ifidni %4,none
  1081                              <1>  %2 %3
  1082                              <1>  %elifidni %5,none
  1083 000085B1 00D0                <1>  %2 %3,%4
  1084                              <1>  %else
  1085                              <1>  %2 %3,%4,%5
  1086                              <1>  %endif
  1087 000085B3 C3                  <1>  ret
  1088                              <1> %%end:
  1089                                  	defOp	"ADD",add,ax,dx,none,TYPE_ARITH
  1090                              <1>  %ifidni %3,al
  1091                              <1>  %assign size SIZE_BYTE
  1092                              <1>  %elifidni %3,dl
  1093                              <1>  %assign size SIZE_BYTE
  1094                              <1>  %elifidni %3,ax
  1095                              <1>  %assign size SIZE_SHORT
  1096                              <1>  %elifidni %3,dx
  1097                              <1>  %assign size SIZE_SHORT
  1098                              <1>  %else
  1099                              <1>  %assign size SIZE_LONG
  1100                              <1>  %endif
  1101 000085B4 040001              <1>  db %%end-%%beg,%6,size
  1102                              <1> %%name:
  1103 000085B7 41444400            <1>  db %1,0
  1104                              <1> %%beg:
  1105                              <1>  %ifidni %4,none
  1106                              <1>  %2 %3
  1107                              <1>  %elifidni %5,none
  1108 000085BB 6601D0              <1>  %2 %3,%4
  1109                              <1>  %else
  1110                              <1>  %2 %3,%4,%5
  1111                              <1>  %endif
  1112 000085BE C3                  <1>  ret
  1113                              <1> %%end:
  1114                                  	defOp	"ADD",add,eax,edx,none,TYPE_ARITH
  1115                              <1>  %ifidni %3,al
  1116                              <1>  %assign size SIZE_BYTE
  1117                              <1>  %elifidni %3,dl
  1118                              <1>  %assign size SIZE_BYTE
  1119                              <1>  %elifidni %3,ax
  1120                              <1>  %assign size SIZE_SHORT
  1121                              <1>  %elifidni %3,dx
  1122                              <1>  %assign size SIZE_SHORT
  1123                              <1>  %else
  1124                              <1>  %assign size SIZE_LONG
  1125                              <1>  %endif
  1126 000085BF 030002              <1>  db %%end-%%beg,%6,size
  1127                              <1> %%name:
  1128 000085C2 41444400            <1>  db %1,0
  1129                              <1> %%beg:
  1130                              <1>  %ifidni %4,none
  1131                              <1>  %2 %3
  1132                              <1>  %elifidni %5,none
  1133 000085C6 01D0                <1>  %2 %3,%4
  1134                              <1>  %else
  1135                              <1>  %2 %3,%4,%5
  1136                              <1>  %endif
  1137 000085C8 C3                  <1>  ret
  1138                              <1> %%end:
  1139                                  	defOp	"OR",or,al,dl,none,TYPE_LOGIC
  1140                              <1>  %ifidni %3,al
  1141                              <1>  %assign size SIZE_BYTE
  1142                              <1>  %elifidni %3,dl
  1143                              <1>  %assign size SIZE_BYTE
  1144                              <1>  %elifidni %3,ax
  1145                              <1>  %assign size SIZE_SHORT
  1146                              <1>  %elifidni %3,dx
  1147                              <1>  %assign size SIZE_SHORT
  1148                              <1>  %else
  1149                              <1>  %assign size SIZE_LONG
  1150                              <1>  %endif
  1151 000085C9 030200              <1>  db %%end-%%beg,%6,size
  1152                              <1> %%name:
  1153 000085CC 4F5200              <1>  db %1,0
  1154                              <1> %%beg:
  1155                              <1>  %ifidni %4,none
  1156                              <1>  %2 %3
  1157                              <1>  %elifidni %5,none
  1158 000085CF 08D0                <1>  %2 %3,%4
  1159                              <1>  %else
  1160                              <1>  %2 %3,%4,%5
  1161                              <1>  %endif
  1162 000085D1 C3                  <1>  ret
  1163                              <1> %%end:
  1164                                  	defOp	"OR",or,ax,dx,none,TYPE_LOGIC
  1165                              <1>  %ifidni %3,al
  1166                              <1>  %assign size SIZE_BYTE
  1167                              <1>  %elifidni %3,dl
  1168                              <1>  %assign size SIZE_BYTE
  1169                              <1>  %elifidni %3,ax
  1170                              <1>  %assign size SIZE_SHORT
  1171                              <1>  %elifidni %3,dx
  1172                              <1>  %assign size SIZE_SHORT
  1173                              <1>  %else
  1174                              <1>  %assign size SIZE_LONG
  1175                              <1>  %endif
  1176 000085D2 040201              <1>  db %%end-%%beg,%6,size
  1177                              <1> %%name:
  1178 000085D5 4F5200              <1>  db %1,0
  1179                              <1> %%beg:
  1180                              <1>  %ifidni %4,none
  1181                              <1>  %2 %3
  1182                              <1>  %elifidni %5,none
  1183 000085D8 6609D0              <1>  %2 %3,%4
  1184                              <1>  %else
  1185                              <1>  %2 %3,%4,%5
  1186                              <1>  %endif
  1187 000085DB C3                  <1>  ret
  1188                              <1> %%end:
  1189                                  	defOp	"OR",or,eax,edx,none,TYPE_LOGIC
  1190                              <1>  %ifidni %3,al
  1191                              <1>  %assign size SIZE_BYTE
  1192                              <1>  %elifidni %3,dl
  1193                              <1>  %assign size SIZE_BYTE
  1194                              <1>  %elifidni %3,ax
  1195                              <1>  %assign size SIZE_SHORT
  1196                              <1>  %elifidni %3,dx
  1197                              <1>  %assign size SIZE_SHORT
  1198                              <1>  %else
  1199                              <1>  %assign size SIZE_LONG
  1200                              <1>  %endif
  1201 000085DC 030202              <1>  db %%end-%%beg,%6,size
  1202                              <1> %%name:
  1203 000085DF 4F5200              <1>  db %1,0
  1204                              <1> %%beg:
  1205                              <1>  %ifidni %4,none
  1206                              <1>  %2 %3
  1207                              <1>  %elifidni %5,none
  1208 000085E2 09D0                <1>  %2 %3,%4
  1209                              <1>  %else
  1210                              <1>  %2 %3,%4,%5
  1211                              <1>  %endif
  1212 000085E4 C3                  <1>  ret
  1213                              <1> %%end:
  1214                                  	defOp	"ADC",adc,al,dl,none,TYPE_ARITH
  1215                              <1>  %ifidni %3,al
  1216                              <1>  %assign size SIZE_BYTE
  1217                              <1>  %elifidni %3,dl
  1218                              <1>  %assign size SIZE_BYTE
  1219                              <1>  %elifidni %3,ax
  1220                              <1>  %assign size SIZE_SHORT
  1221                              <1>  %elifidni %3,dx
  1222                              <1>  %assign size SIZE_SHORT
  1223                              <1>  %else
  1224                              <1>  %assign size SIZE_LONG
  1225                              <1>  %endif
  1226 000085E5 030000              <1>  db %%end-%%beg,%6,size
  1227                              <1> %%name:
  1228 000085E8 41444300            <1>  db %1,0
  1229                              <1> %%beg:
  1230                              <1>  %ifidni %4,none
  1231                              <1>  %2 %3
  1232                              <1>  %elifidni %5,none
  1233 000085EC 10D0                <1>  %2 %3,%4
  1234                              <1>  %else
  1235                              <1>  %2 %3,%4,%5
  1236                              <1>  %endif
  1237 000085EE C3                  <1>  ret
  1238                              <1> %%end:
  1239                                  	defOp	"ADC",adc,ax,dx,none,TYPE_ARITH
  1240                              <1>  %ifidni %3,al
  1241                              <1>  %assign size SIZE_BYTE
  1242                              <1>  %elifidni %3,dl
  1243                              <1>  %assign size SIZE_BYTE
  1244                              <1>  %elifidni %3,ax
  1245                              <1>  %assign size SIZE_SHORT
  1246                              <1>  %elifidni %3,dx
  1247                              <1>  %assign size SIZE_SHORT
  1248                              <1>  %else
  1249                              <1>  %assign size SIZE_LONG
  1250                              <1>  %endif
  1251 000085EF 040001              <1>  db %%end-%%beg,%6,size
  1252                              <1> %%name:
  1253 000085F2 41444300            <1>  db %1,0
  1254                              <1> %%beg:
  1255                              <1>  %ifidni %4,none
  1256                              <1>  %2 %3
  1257                              <1>  %elifidni %5,none
  1258 000085F6 6611D0              <1>  %2 %3,%4
  1259                              <1>  %else
  1260                              <1>  %2 %3,%4,%5
  1261                              <1>  %endif
  1262 000085F9 C3                  <1>  ret
  1263                              <1> %%end:
  1264                                  	defOp	"ADC",adc,eax,edx,none,TYPE_ARITH
  1265                              <1>  %ifidni %3,al
  1266                              <1>  %assign size SIZE_BYTE
  1267                              <1>  %elifidni %3,dl
  1268                              <1>  %assign size SIZE_BYTE
  1269                              <1>  %elifidni %3,ax
  1270                              <1>  %assign size SIZE_SHORT
  1271                              <1>  %elifidni %3,dx
  1272                              <1>  %assign size SIZE_SHORT
  1273                              <1>  %else
  1274                              <1>  %assign size SIZE_LONG
  1275                              <1>  %endif
  1276 000085FA 030002              <1>  db %%end-%%beg,%6,size
  1277                              <1> %%name:
  1278 000085FD 41444300            <1>  db %1,0
  1279                              <1> %%beg:
  1280                              <1>  %ifidni %4,none
  1281                              <1>  %2 %3
  1282                              <1>  %elifidni %5,none
  1283 00008601 11D0                <1>  %2 %3,%4
  1284                              <1>  %else
  1285                              <1>  %2 %3,%4,%5
  1286                              <1>  %endif
  1287 00008603 C3                  <1>  ret
  1288                              <1> %%end:
  1289                                  	defOp	"SBB",sbb,al,dl,none,TYPE_ARITH
  1290                              <1>  %ifidni %3,al
  1291                              <1>  %assign size SIZE_BYTE
  1292                              <1>  %elifidni %3,dl
  1293                              <1>  %assign size SIZE_BYTE
  1294                              <1>  %elifidni %3,ax
  1295                              <1>  %assign size SIZE_SHORT
  1296                              <1>  %elifidni %3,dx
  1297                              <1>  %assign size SIZE_SHORT
  1298                              <1>  %else
  1299                              <1>  %assign size SIZE_LONG
  1300                              <1>  %endif
  1301 00008604 030000              <1>  db %%end-%%beg,%6,size
  1302                              <1> %%name:
  1303 00008607 53424200            <1>  db %1,0
  1304                              <1> %%beg:
  1305                              <1>  %ifidni %4,none
  1306                              <1>  %2 %3
  1307                              <1>  %elifidni %5,none
  1308 0000860B 18D0                <1>  %2 %3,%4
  1309                              <1>  %else
  1310                              <1>  %2 %3,%4,%5
  1311                              <1>  %endif
  1312 0000860D C3                  <1>  ret
  1313                              <1> %%end:
  1314                                  	defOp	"SBB",sbb,ax,dx,none,TYPE_ARITH
  1315                              <1>  %ifidni %3,al
  1316                              <1>  %assign size SIZE_BYTE
  1317                              <1>  %elifidni %3,dl
  1318                              <1>  %assign size SIZE_BYTE
  1319                              <1>  %elifidni %3,ax
  1320                              <1>  %assign size SIZE_SHORT
  1321                              <1>  %elifidni %3,dx
  1322                              <1>  %assign size SIZE_SHORT
  1323                              <1>  %else
  1324                              <1>  %assign size SIZE_LONG
  1325                              <1>  %endif
  1326 0000860E 040001              <1>  db %%end-%%beg,%6,size
  1327                              <1> %%name:
  1328 00008611 53424200            <1>  db %1,0
  1329                              <1> %%beg:
  1330                              <1>  %ifidni %4,none
  1331                              <1>  %2 %3
  1332                              <1>  %elifidni %5,none
  1333 00008615 6619D0              <1>  %2 %3,%4
  1334                              <1>  %else
  1335                              <1>  %2 %3,%4,%5
  1336                              <1>  %endif
  1337 00008618 C3                  <1>  ret
  1338                              <1> %%end:
  1339                                  	defOp	"SBB",sbb,eax,edx,none,TYPE_ARITH
  1340                              <1>  %ifidni %3,al
  1341                              <1>  %assign size SIZE_BYTE
  1342                              <1>  %elifidni %3,dl
  1343                              <1>  %assign size SIZE_BYTE
  1344                              <1>  %elifidni %3,ax
  1345                              <1>  %assign size SIZE_SHORT
  1346                              <1>  %elifidni %3,dx
  1347                              <1>  %assign size SIZE_SHORT
  1348                              <1>  %else
  1349                              <1>  %assign size SIZE_LONG
  1350                              <1>  %endif
  1351 00008619 030002              <1>  db %%end-%%beg,%6,size
  1352                              <1> %%name:
  1353 0000861C 53424200            <1>  db %1,0
  1354                              <1> %%beg:
  1355                              <1>  %ifidni %4,none
  1356                              <1>  %2 %3
  1357                              <1>  %elifidni %5,none
  1358 00008620 19D0                <1>  %2 %3,%4
  1359                              <1>  %else
  1360                              <1>  %2 %3,%4,%5
  1361                              <1>  %endif
  1362 00008622 C3                  <1>  ret
  1363                              <1> %%end:
  1364                                  	defOp	"AND",and,al,dl,none,TYPE_LOGIC
  1365                              <1>  %ifidni %3,al
  1366                              <1>  %assign size SIZE_BYTE
  1367                              <1>  %elifidni %3,dl
  1368                              <1>  %assign size SIZE_BYTE
  1369                              <1>  %elifidni %3,ax
  1370                              <1>  %assign size SIZE_SHORT
  1371                              <1>  %elifidni %3,dx
  1372                              <1>  %assign size SIZE_SHORT
  1373                              <1>  %else
  1374                              <1>  %assign size SIZE_LONG
  1375                              <1>  %endif
  1376 00008623 030200              <1>  db %%end-%%beg,%6,size
  1377                              <1> %%name:
  1378 00008626 414E4400            <1>  db %1,0
  1379                              <1> %%beg:
  1380                              <1>  %ifidni %4,none
  1381                              <1>  %2 %3
  1382                              <1>  %elifidni %5,none
  1383 0000862A 20D0                <1>  %2 %3,%4
  1384                              <1>  %else
  1385                              <1>  %2 %3,%4,%5
  1386                              <1>  %endif
  1387 0000862C C3                  <1>  ret
  1388                              <1> %%end:
  1389                                  	defOp	"AND",and,ax,dx,none,TYPE_LOGIC
  1390                              <1>  %ifidni %3,al
  1391                              <1>  %assign size SIZE_BYTE
  1392                              <1>  %elifidni %3,dl
  1393                              <1>  %assign size SIZE_BYTE
  1394                              <1>  %elifidni %3,ax
  1395                              <1>  %assign size SIZE_SHORT
  1396                              <1>  %elifidni %3,dx
  1397                              <1>  %assign size SIZE_SHORT
  1398                              <1>  %else
  1399                              <1>  %assign size SIZE_LONG
  1400                              <1>  %endif
  1401 0000862D 040201              <1>  db %%end-%%beg,%6,size
  1402                              <1> %%name:
  1403 00008630 414E4400            <1>  db %1,0
  1404                              <1> %%beg:
  1405                              <1>  %ifidni %4,none
  1406                              <1>  %2 %3
  1407                              <1>  %elifidni %5,none
  1408 00008634 6621D0              <1>  %2 %3,%4
  1409                              <1>  %else
  1410                              <1>  %2 %3,%4,%5
  1411                              <1>  %endif
  1412 00008637 C3                  <1>  ret
  1413                              <1> %%end:
  1414                                  	defOp	"AND",and,eax,edx,none,TYPE_LOGIC
  1415                              <1>  %ifidni %3,al
  1416                              <1>  %assign size SIZE_BYTE
  1417                              <1>  %elifidni %3,dl
  1418                              <1>  %assign size SIZE_BYTE
  1419                              <1>  %elifidni %3,ax
  1420                              <1>  %assign size SIZE_SHORT
  1421                              <1>  %elifidni %3,dx
  1422                              <1>  %assign size SIZE_SHORT
  1423                              <1>  %else
  1424                              <1>  %assign size SIZE_LONG
  1425                              <1>  %endif
  1426 00008638 030202              <1>  db %%end-%%beg,%6,size
  1427                              <1> %%name:
  1428 0000863B 414E4400            <1>  db %1,0
  1429                              <1> %%beg:
  1430                              <1>  %ifidni %4,none
  1431                              <1>  %2 %3
  1432                              <1>  %elifidni %5,none
  1433 0000863F 21D0                <1>  %2 %3,%4
  1434                              <1>  %else
  1435                              <1>  %2 %3,%4,%5
  1436                              <1>  %endif
  1437 00008641 C3                  <1>  ret
  1438                              <1> %%end:
  1439                                  	defOp	"SUB",sub,al,dl,none,TYPE_ARITH
  1440                              <1>  %ifidni %3,al
  1441                              <1>  %assign size SIZE_BYTE
  1442                              <1>  %elifidni %3,dl
  1443                              <1>  %assign size SIZE_BYTE
  1444                              <1>  %elifidni %3,ax
  1445                              <1>  %assign size SIZE_SHORT
  1446                              <1>  %elifidni %3,dx
  1447                              <1>  %assign size SIZE_SHORT
  1448                              <1>  %else
  1449                              <1>  %assign size SIZE_LONG
  1450                              <1>  %endif
  1451 00008642 030000              <1>  db %%end-%%beg,%6,size
  1452                              <1> %%name:
  1453 00008645 53554200            <1>  db %1,0
  1454                              <1> %%beg:
  1455                              <1>  %ifidni %4,none
  1456                              <1>  %2 %3
  1457                              <1>  %elifidni %5,none
  1458 00008649 28D0                <1>  %2 %3,%4
  1459                              <1>  %else
  1460                              <1>  %2 %3,%4,%5
  1461                              <1>  %endif
  1462 0000864B C3                  <1>  ret
  1463                              <1> %%end:
  1464                                  	defOp	"SUB",sub,ax,dx,none,TYPE_ARITH
  1465                              <1>  %ifidni %3,al
  1466                              <1>  %assign size SIZE_BYTE
  1467                              <1>  %elifidni %3,dl
  1468                              <1>  %assign size SIZE_BYTE
  1469                              <1>  %elifidni %3,ax
  1470                              <1>  %assign size SIZE_SHORT
  1471                              <1>  %elifidni %3,dx
  1472                              <1>  %assign size SIZE_SHORT
  1473                              <1>  %else
  1474                              <1>  %assign size SIZE_LONG
  1475                              <1>  %endif
  1476 0000864C 040001              <1>  db %%end-%%beg,%6,size
  1477                              <1> %%name:
  1478 0000864F 53554200            <1>  db %1,0
  1479                              <1> %%beg:
  1480                              <1>  %ifidni %4,none
  1481                              <1>  %2 %3
  1482                              <1>  %elifidni %5,none
  1483 00008653 6629D0              <1>  %2 %3,%4
  1484                              <1>  %else
  1485                              <1>  %2 %3,%4,%5
  1486                              <1>  %endif
  1487 00008656 C3                  <1>  ret
  1488                              <1> %%end:
  1489                                  	defOp	"SUB",sub,eax,edx,none,TYPE_ARITH
  1490                              <1>  %ifidni %3,al
  1491                              <1>  %assign size SIZE_BYTE
  1492                              <1>  %elifidni %3,dl
  1493                              <1>  %assign size SIZE_BYTE
  1494                              <1>  %elifidni %3,ax
  1495                              <1>  %assign size SIZE_SHORT
  1496                              <1>  %elifidni %3,dx
  1497                              <1>  %assign size SIZE_SHORT
  1498                              <1>  %else
  1499                              <1>  %assign size SIZE_LONG
  1500                              <1>  %endif
  1501 00008657 030002              <1>  db %%end-%%beg,%6,size
  1502                              <1> %%name:
  1503 0000865A 53554200            <1>  db %1,0
  1504                              <1> %%beg:
  1505                              <1>  %ifidni %4,none
  1506                              <1>  %2 %3
  1507                              <1>  %elifidni %5,none
  1508 0000865E 29D0                <1>  %2 %3,%4
  1509                              <1>  %else
  1510                              <1>  %2 %3,%4,%5
  1511                              <1>  %endif
  1512 00008660 C3                  <1>  ret
  1513                              <1> %%end:
  1514                                  	defOp	"XOR",xor,al,dl,none,TYPE_LOGIC
  1515                              <1>  %ifidni %3,al
  1516                              <1>  %assign size SIZE_BYTE
  1517                              <1>  %elifidni %3,dl
  1518                              <1>  %assign size SIZE_BYTE
  1519                              <1>  %elifidni %3,ax
  1520                              <1>  %assign size SIZE_SHORT
  1521                              <1>  %elifidni %3,dx
  1522                              <1>  %assign size SIZE_SHORT
  1523                              <1>  %else
  1524                              <1>  %assign size SIZE_LONG
  1525                              <1>  %endif
  1526 00008661 030200              <1>  db %%end-%%beg,%6,size
  1527                              <1> %%name:
  1528 00008664 584F5200            <1>  db %1,0
  1529                              <1> %%beg:
  1530                              <1>  %ifidni %4,none
  1531                              <1>  %2 %3
  1532                              <1>  %elifidni %5,none
  1533 00008668 30D0                <1>  %2 %3,%4
  1534                              <1>  %else
  1535                              <1>  %2 %3,%4,%5
  1536                              <1>  %endif
  1537 0000866A C3                  <1>  ret
  1538                              <1> %%end:
  1539                                  	defOp	"XOR",xor,ax,dx,none,TYPE_LOGIC
  1540                              <1>  %ifidni %3,al
  1541                              <1>  %assign size SIZE_BYTE
  1542                              <1>  %elifidni %3,dl
  1543                              <1>  %assign size SIZE_BYTE
  1544                              <1>  %elifidni %3,ax
  1545                              <1>  %assign size SIZE_SHORT
  1546                              <1>  %elifidni %3,dx
  1547                              <1>  %assign size SIZE_SHORT
  1548                              <1>  %else
  1549                              <1>  %assign size SIZE_LONG
  1550                              <1>  %endif
  1551 0000866B 040201              <1>  db %%end-%%beg,%6,size
  1552                              <1> %%name:
  1553 0000866E 584F5200            <1>  db %1,0
  1554                              <1> %%beg:
  1555                              <1>  %ifidni %4,none
  1556                              <1>  %2 %3
  1557                              <1>  %elifidni %5,none
  1558 00008672 6631D0              <1>  %2 %3,%4
  1559                              <1>  %else
  1560                              <1>  %2 %3,%4,%5
  1561                              <1>  %endif
  1562 00008675 C3                  <1>  ret
  1563                              <1> %%end:
  1564                                  	defOp	"XOR",xor,eax,edx,none,TYPE_LOGIC
  1565                              <1>  %ifidni %3,al
  1566                              <1>  %assign size SIZE_BYTE
  1567                              <1>  %elifidni %3,dl
  1568                              <1>  %assign size SIZE_BYTE
  1569                              <1>  %elifidni %3,ax
  1570                              <1>  %assign size SIZE_SHORT
  1571                              <1>  %elifidni %3,dx
  1572                              <1>  %assign size SIZE_SHORT
  1573                              <1>  %else
  1574                              <1>  %assign size SIZE_LONG
  1575                              <1>  %endif
  1576 00008676 030202              <1>  db %%end-%%beg,%6,size
  1577                              <1> %%name:
  1578 00008679 584F5200            <1>  db %1,0
  1579                              <1> %%beg:
  1580                              <1>  %ifidni %4,none
  1581                              <1>  %2 %3
  1582                              <1>  %elifidni %5,none
  1583 0000867D 31D0                <1>  %2 %3,%4
  1584                              <1>  %else
  1585                              <1>  %2 %3,%4,%5
  1586                              <1>  %endif
  1587 0000867F C3                  <1>  ret
  1588                              <1> %%end:
  1589                                  	defOp	"CMP",cmp,al,dl,none,TYPE_ARITH
  1590                              <1>  %ifidni %3,al
  1591                              <1>  %assign size SIZE_BYTE
  1592                              <1>  %elifidni %3,dl
  1593                              <1>  %assign size SIZE_BYTE
  1594                              <1>  %elifidni %3,ax
  1595                              <1>  %assign size SIZE_SHORT
  1596                              <1>  %elifidni %3,dx
  1597                              <1>  %assign size SIZE_SHORT
  1598                              <1>  %else
  1599                              <1>  %assign size SIZE_LONG
  1600                              <1>  %endif
  1601 00008680 030000              <1>  db %%end-%%beg,%6,size
  1602                              <1> %%name:
  1603 00008683 434D5000            <1>  db %1,0
  1604                              <1> %%beg:
  1605                              <1>  %ifidni %4,none
  1606                              <1>  %2 %3
  1607                              <1>  %elifidni %5,none
  1608 00008687 38D0                <1>  %2 %3,%4
  1609                              <1>  %else
  1610                              <1>  %2 %3,%4,%5
  1611                              <1>  %endif
  1612 00008689 C3                  <1>  ret
  1613                              <1> %%end:
  1614                                  	defOp	"CMP",cmp,ax,dx,none,TYPE_ARITH
  1615                              <1>  %ifidni %3,al
  1616                              <1>  %assign size SIZE_BYTE
  1617                              <1>  %elifidni %3,dl
  1618                              <1>  %assign size SIZE_BYTE
  1619                              <1>  %elifidni %3,ax
  1620                              <1>  %assign size SIZE_SHORT
  1621                              <1>  %elifidni %3,dx
  1622                              <1>  %assign size SIZE_SHORT
  1623                              <1>  %else
  1624                              <1>  %assign size SIZE_LONG
  1625                              <1>  %endif
  1626 0000868A 040001              <1>  db %%end-%%beg,%6,size
  1627                              <1> %%name:
  1628 0000868D 434D5000            <1>  db %1,0
  1629                              <1> %%beg:
  1630                              <1>  %ifidni %4,none
  1631                              <1>  %2 %3
  1632                              <1>  %elifidni %5,none
  1633 00008691 6639D0              <1>  %2 %3,%4
  1634                              <1>  %else
  1635                              <1>  %2 %3,%4,%5
  1636                              <1>  %endif
  1637 00008694 C3                  <1>  ret
  1638                              <1> %%end:
  1639                                  	defOp	"CMP",cmp,eax,edx,none,TYPE_ARITH
  1640                              <1>  %ifidni %3,al
  1641                              <1>  %assign size SIZE_BYTE
  1642                              <1>  %elifidni %3,dl
  1643                              <1>  %assign size SIZE_BYTE
  1644                              <1>  %elifidni %3,ax
  1645                              <1>  %assign size SIZE_SHORT
  1646                              <1>  %elifidni %3,dx
  1647                              <1>  %assign size SIZE_SHORT
  1648                              <1>  %else
  1649                              <1>  %assign size SIZE_LONG
  1650                              <1>  %endif
  1651 00008695 030002              <1>  db %%end-%%beg,%6,size
  1652                              <1> %%name:
  1653 00008698 434D5000            <1>  db %1,0
  1654                              <1> %%beg:
  1655                              <1>  %ifidni %4,none
  1656                              <1>  %2 %3
  1657                              <1>  %elifidni %5,none
  1658 0000869C 39D0                <1>  %2 %3,%4
  1659                              <1>  %else
  1660                              <1>  %2 %3,%4,%5
  1661                              <1>  %endif
  1662 0000869E C3                  <1>  ret
  1663                              <1> %%end:
  1664                                  	defOp	"INC",inc,al,none,none,TYPE_ARITH1
  1665                              <1>  %ifidni %3,al
  1666                              <1>  %assign size SIZE_BYTE
  1667                              <1>  %elifidni %3,dl
  1668                              <1>  %assign size SIZE_BYTE
  1669                              <1>  %elifidni %3,ax
  1670                              <1>  %assign size SIZE_SHORT
  1671                              <1>  %elifidni %3,dx
  1672                              <1>  %assign size SIZE_SHORT
  1673                              <1>  %else
  1674                              <1>  %assign size SIZE_LONG
  1675                              <1>  %endif
  1676 0000869F 030100              <1>  db %%end-%%beg,%6,size
  1677                              <1> %%name:
  1678 000086A2 494E4300            <1>  db %1,0
  1679                              <1> %%beg:
  1680                              <1>  %ifidni %4,none
  1681 000086A6 FEC0                <1>  %2 %3
  1682                              <1>  %elifidni %5,none
  1683                              <1>  %2 %3,%4
  1684                              <1>  %else
  1685                              <1>  %2 %3,%4,%5
  1686                              <1>  %endif
  1687 000086A8 C3                  <1>  ret
  1688                              <1> %%end:
  1689                                  	defOp	"INC",inc,ax,none,none,TYPE_ARITH1
  1690                              <1>  %ifidni %3,al
  1691                              <1>  %assign size SIZE_BYTE
  1692                              <1>  %elifidni %3,dl
  1693                              <1>  %assign size SIZE_BYTE
  1694                              <1>  %elifidni %3,ax
  1695                              <1>  %assign size SIZE_SHORT
  1696                              <1>  %elifidni %3,dx
  1697                              <1>  %assign size SIZE_SHORT
  1698                              <1>  %else
  1699                              <1>  %assign size SIZE_LONG
  1700                              <1>  %endif
  1701 000086A9 030101              <1>  db %%end-%%beg,%6,size
  1702                              <1> %%name:
  1703 000086AC 494E4300            <1>  db %1,0
  1704                              <1> %%beg:
  1705                              <1>  %ifidni %4,none
  1706 000086B0 6640                <1>  %2 %3
  1707                              <1>  %elifidni %5,none
  1708                              <1>  %2 %3,%4
  1709                              <1>  %else
  1710                              <1>  %2 %3,%4,%5
  1711                              <1>  %endif
  1712 000086B2 C3                  <1>  ret
  1713                              <1> %%end:
  1714                                  	defOp	"INC",inc,eax,none,none,TYPE_ARITH1
  1715                              <1>  %ifidni %3,al
  1716                              <1>  %assign size SIZE_BYTE
  1717                              <1>  %elifidni %3,dl
  1718                              <1>  %assign size SIZE_BYTE
  1719                              <1>  %elifidni %3,ax
  1720                              <1>  %assign size SIZE_SHORT
  1721                              <1>  %elifidni %3,dx
  1722                              <1>  %assign size SIZE_SHORT
  1723                              <1>  %else
  1724                              <1>  %assign size SIZE_LONG
  1725                              <1>  %endif
  1726 000086B3 020102              <1>  db %%end-%%beg,%6,size
  1727                              <1> %%name:
  1728 000086B6 494E4300            <1>  db %1,0
  1729                              <1> %%beg:
  1730                              <1>  %ifidni %4,none
  1731 000086BA 40                  <1>  %2 %3
  1732                              <1>  %elifidni %5,none
  1733                              <1>  %2 %3,%4
  1734                              <1>  %else
  1735                              <1>  %2 %3,%4,%5
  1736                              <1>  %endif
  1737 000086BB C3                  <1>  ret
  1738                              <1> %%end:
  1739                                  	defOp	"DEC",dec,al,none,none,TYPE_ARITH1
  1740                              <1>  %ifidni %3,al
  1741                              <1>  %assign size SIZE_BYTE
  1742                              <1>  %elifidni %3,dl
  1743                              <1>  %assign size SIZE_BYTE
  1744                              <1>  %elifidni %3,ax
  1745                              <1>  %assign size SIZE_SHORT
  1746                              <1>  %elifidni %3,dx
  1747                              <1>  %assign size SIZE_SHORT
  1748                              <1>  %else
  1749                              <1>  %assign size SIZE_LONG
  1750                              <1>  %endif
  1751 000086BC 030100              <1>  db %%end-%%beg,%6,size
  1752                              <1> %%name:
  1753 000086BF 44454300            <1>  db %1,0
  1754                              <1> %%beg:
  1755                              <1>  %ifidni %4,none
  1756 000086C3 FEC8                <1>  %2 %3
  1757                              <1>  %elifidni %5,none
  1758                              <1>  %2 %3,%4
  1759                              <1>  %else
  1760                              <1>  %2 %3,%4,%5
  1761                              <1>  %endif
  1762 000086C5 C3                  <1>  ret
  1763                              <1> %%end:
  1764                                  	defOp	"DEC",dec,ax,none,none,TYPE_ARITH1
  1765                              <1>  %ifidni %3,al
  1766                              <1>  %assign size SIZE_BYTE
  1767                              <1>  %elifidni %3,dl
  1768                              <1>  %assign size SIZE_BYTE
  1769                              <1>  %elifidni %3,ax
  1770                              <1>  %assign size SIZE_SHORT
  1771                              <1>  %elifidni %3,dx
  1772                              <1>  %assign size SIZE_SHORT
  1773                              <1>  %else
  1774                              <1>  %assign size SIZE_LONG
  1775                              <1>  %endif
  1776 000086C6 030101              <1>  db %%end-%%beg,%6,size
  1777                              <1> %%name:
  1778 000086C9 44454300            <1>  db %1,0
  1779                              <1> %%beg:
  1780                              <1>  %ifidni %4,none
  1781 000086CD 6648                <1>  %2 %3
  1782                              <1>  %elifidni %5,none
  1783                              <1>  %2 %3,%4
  1784                              <1>  %else
  1785                              <1>  %2 %3,%4,%5
  1786                              <1>  %endif
  1787 000086CF C3                  <1>  ret
  1788                              <1> %%end:
  1789                                  	defOp	"DEC",dec,eax,none,none,TYPE_ARITH1
  1790                              <1>  %ifidni %3,al
  1791                              <1>  %assign size SIZE_BYTE
  1792                              <1>  %elifidni %3,dl
  1793                              <1>  %assign size SIZE_BYTE
  1794                              <1>  %elifidni %3,ax
  1795                              <1>  %assign size SIZE_SHORT
  1796                              <1>  %elifidni %3,dx
  1797                              <1>  %assign size SIZE_SHORT
  1798                              <1>  %else
  1799                              <1>  %assign size SIZE_LONG
  1800                              <1>  %endif
  1801 000086D0 020102              <1>  db %%end-%%beg,%6,size
  1802                              <1> %%name:
  1803 000086D3 44454300            <1>  db %1,0
  1804                              <1> %%beg:
  1805                              <1>  %ifidni %4,none
  1806 000086D7 48                  <1>  %2 %3
  1807                              <1>  %elifidni %5,none
  1808                              <1>  %2 %3,%4
  1809                              <1>  %else
  1810                              <1>  %2 %3,%4,%5
  1811                              <1>  %endif
  1812 000086D8 C3                  <1>  ret
  1813                              <1> %%end:
  1814                                  	defOp	"MULA",mul,dl,none,none,TYPE_MULTIPLY
  1815                              <1>  %ifidni %3,al
  1816                              <1>  %assign size SIZE_BYTE
  1817                              <1>  %elifidni %3,dl
  1818                              <1>  %assign size SIZE_BYTE
  1819                              <1>  %elifidni %3,ax
  1820                              <1>  %assign size SIZE_SHORT
  1821                              <1>  %elifidni %3,dx
  1822                              <1>  %assign size SIZE_SHORT
  1823                              <1>  %else
  1824                              <1>  %assign size SIZE_LONG
  1825                              <1>  %endif
  1826 000086D9 030300              <1>  db %%end-%%beg,%6,size
  1827                              <1> %%name:
  1828 000086DC 4D554C4100          <1>  db %1,0
  1829                              <1> %%beg:
  1830                              <1>  %ifidni %4,none
  1831 000086E1 F6E2                <1>  %2 %3
  1832                              <1>  %elifidni %5,none
  1833                              <1>  %2 %3,%4
  1834                              <1>  %else
  1835                              <1>  %2 %3,%4,%5
  1836                              <1>  %endif
  1837 000086E3 C3                  <1>  ret
  1838                              <1> %%end:
  1839                                  	defOp	"MULA",mul,dx,none,none,TYPE_MULTIPLY
  1840                              <1>  %ifidni %3,al
  1841                              <1>  %assign size SIZE_BYTE
  1842                              <1>  %elifidni %3,dl
  1843                              <1>  %assign size SIZE_BYTE
  1844                              <1>  %elifidni %3,ax
  1845                              <1>  %assign size SIZE_SHORT
  1846                              <1>  %elifidni %3,dx
  1847                              <1>  %assign size SIZE_SHORT
  1848                              <1>  %else
  1849                              <1>  %assign size SIZE_LONG
  1850                              <1>  %endif
  1851 000086E4 040301              <1>  db %%end-%%beg,%6,size
  1852                              <1> %%name:
  1853 000086E7 4D554C4100          <1>  db %1,0
  1854                              <1> %%beg:
  1855                              <1>  %ifidni %4,none
  1856 000086EC 66F7E2              <1>  %2 %3
  1857                              <1>  %elifidni %5,none
  1858                              <1>  %2 %3,%4
  1859                              <1>  %else
  1860                              <1>  %2 %3,%4,%5
  1861                              <1>  %endif
  1862 000086EF C3                  <1>  ret
  1863                              <1> %%end:
  1864                                  	defOp	"MULA",mul,edx,none,none,TYPE_MULTIPLY
  1865                              <1>  %ifidni %3,al
  1866                              <1>  %assign size SIZE_BYTE
  1867                              <1>  %elifidni %3,dl
  1868                              <1>  %assign size SIZE_BYTE
  1869                              <1>  %elifidni %3,ax
  1870                              <1>  %assign size SIZE_SHORT
  1871                              <1>  %elifidni %3,dx
  1872                              <1>  %assign size SIZE_SHORT
  1873                              <1>  %else
  1874                              <1>  %assign size SIZE_LONG
  1875                              <1>  %endif
  1876 000086F0 030302              <1>  db %%end-%%beg,%6,size
  1877                              <1> %%name:
  1878 000086F3 4D554C4100          <1>  db %1,0
  1879                              <1> %%beg:
  1880                              <1>  %ifidni %4,none
  1881 000086F8 F7E2                <1>  %2 %3
  1882                              <1>  %elifidni %5,none
  1883                              <1>  %2 %3,%4
  1884                              <1>  %else
  1885                              <1>  %2 %3,%4,%5
  1886                              <1>  %endif
  1887 000086FA C3                  <1>  ret
  1888                              <1> %%end:
  1889                                  	defOp	"IMULA",imul,dl,none,none,TYPE_MULTIPLY
  1890                              <1>  %ifidni %3,al
  1891                              <1>  %assign size SIZE_BYTE
  1892                              <1>  %elifidni %3,dl
  1893                              <1>  %assign size SIZE_BYTE
  1894                              <1>  %elifidni %3,ax
  1895                              <1>  %assign size SIZE_SHORT
  1896                              <1>  %elifidni %3,dx
  1897                              <1>  %assign size SIZE_SHORT
  1898                              <1>  %else
  1899                              <1>  %assign size SIZE_LONG
  1900                              <1>  %endif
  1901 000086FB 030300              <1>  db %%end-%%beg,%6,size
  1902                              <1> %%name:
  1903 000086FE 494D554C4100        <1>  db %1,0
  1904                              <1> %%beg:
  1905                              <1>  %ifidni %4,none
  1906 00008704 F6EA                <1>  %2 %3
  1907                              <1>  %elifidni %5,none
  1908                              <1>  %2 %3,%4
  1909                              <1>  %else
  1910                              <1>  %2 %3,%4,%5
  1911                              <1>  %endif
  1912 00008706 C3                  <1>  ret
  1913                              <1> %%end:
  1914                                  	defOp	"IMULA",imul,dx,none,none,TYPE_MULTIPLY
  1915                              <1>  %ifidni %3,al
  1916                              <1>  %assign size SIZE_BYTE
  1917                              <1>  %elifidni %3,dl
  1918                              <1>  %assign size SIZE_BYTE
  1919                              <1>  %elifidni %3,ax
  1920                              <1>  %assign size SIZE_SHORT
  1921                              <1>  %elifidni %3,dx
  1922                              <1>  %assign size SIZE_SHORT
  1923                              <1>  %else
  1924                              <1>  %assign size SIZE_LONG
  1925                              <1>  %endif
  1926 00008707 040301              <1>  db %%end-%%beg,%6,size
  1927                              <1> %%name:
  1928 0000870A 494D554C4100        <1>  db %1,0
  1929                              <1> %%beg:
  1930                              <1>  %ifidni %4,none
  1931 00008710 66F7EA              <1>  %2 %3
  1932                              <1>  %elifidni %5,none
  1933                              <1>  %2 %3,%4
  1934                              <1>  %else
  1935                              <1>  %2 %3,%4,%5
  1936                              <1>  %endif
  1937 00008713 C3                  <1>  ret
  1938                              <1> %%end:
  1939                                  	defOp	"IMULA",imul,edx,none,none,TYPE_MULTIPLY
  1940                              <1>  %ifidni %3,al
  1941                              <1>  %assign size SIZE_BYTE
  1942                              <1>  %elifidni %3,dl
  1943                              <1>  %assign size SIZE_BYTE
  1944                              <1>  %elifidni %3,ax
  1945                              <1>  %assign size SIZE_SHORT
  1946                              <1>  %elifidni %3,dx
  1947                              <1>  %assign size SIZE_SHORT
  1948                              <1>  %else
  1949                              <1>  %assign size SIZE_LONG
  1950                              <1>  %endif
  1951 00008714 030302              <1>  db %%end-%%beg,%6,size
  1952                              <1> %%name:
  1953 00008717 494D554C4100        <1>  db %1,0
  1954                              <1> %%beg:
  1955                              <1>  %ifidni %4,none
  1956 0000871D F7EA                <1>  %2 %3
  1957                              <1>  %elifidni %5,none
  1958                              <1>  %2 %3,%4
  1959                              <1>  %else
  1960                              <1>  %2 %3,%4,%5
  1961                              <1>  %endif
  1962 0000871F C3                  <1>  ret
  1963                              <1> %%end:
  1964                                  	defOp	"IMUL",imul,ax,dx,none,TYPE_MULTIPLY
  1965                              <1>  %ifidni %3,al
  1966                              <1>  %assign size SIZE_BYTE
  1967                              <1>  %elifidni %3,dl
  1968                              <1>  %assign size SIZE_BYTE
  1969                              <1>  %elifidni %3,ax
  1970                              <1>  %assign size SIZE_SHORT
  1971                              <1>  %elifidni %3,dx
  1972                              <1>  %assign size SIZE_SHORT
  1973                              <1>  %else
  1974                              <1>  %assign size SIZE_LONG
  1975                              <1>  %endif
  1976 00008720 050301              <1>  db %%end-%%beg,%6,size
  1977                              <1> %%name:
  1978 00008723 494D554C00          <1>  db %1,0
  1979                              <1> %%beg:
  1980                              <1>  %ifidni %4,none
  1981                              <1>  %2 %3
  1982                              <1>  %elifidni %5,none
  1983 00008728 660FAFC2            <1>  %2 %3,%4
  1984                              <1>  %else
  1985                              <1>  %2 %3,%4,%5
  1986                              <1>  %endif
  1987 0000872C C3                  <1>  ret
  1988                              <1> %%end:
  1989                                  	defOp	"IMUL",imul,eax,edx,none,TYPE_MULTIPLY
  1990                              <1>  %ifidni %3,al
  1991                              <1>  %assign size SIZE_BYTE
  1992                              <1>  %elifidni %3,dl
  1993                              <1>  %assign size SIZE_BYTE
  1994                              <1>  %elifidni %3,ax
  1995                              <1>  %assign size SIZE_SHORT
  1996                              <1>  %elifidni %3,dx
  1997                              <1>  %assign size SIZE_SHORT
  1998                              <1>  %else
  1999                              <1>  %assign size SIZE_LONG
  2000                              <1>  %endif
  2001 0000872D 040302              <1>  db %%end-%%beg,%6,size
  2002                              <1> %%name:
  2003 00008730 494D554C00          <1>  db %1,0
  2004                              <1> %%beg:
  2005                              <1>  %ifidni %4,none
  2006                              <1>  %2 %3
  2007                              <1>  %elifidni %5,none
  2008 00008735 0FAFC2              <1>  %2 %3,%4
  2009                              <1>  %else
  2010                              <1>  %2 %3,%4,%5
  2011                              <1>  %endif
  2012 00008738 C3                  <1>  ret
  2013                              <1> %%end:
  2014                                  	defOp	"IMUL8",imul,ax,dx,0x77,TYPE_MULTIPLY
  2015                              <1>  %ifidni %3,al
  2016                              <1>  %assign size SIZE_BYTE
  2017                              <1>  %elifidni %3,dl
  2018                              <1>  %assign size SIZE_BYTE
  2019                              <1>  %elifidni %3,ax
  2020                              <1>  %assign size SIZE_SHORT
  2021                              <1>  %elifidni %3,dx
  2022                              <1>  %assign size SIZE_SHORT
  2023                              <1>  %else
  2024                              <1>  %assign size SIZE_LONG
  2025                              <1>  %endif
  2026 00008739 060301              <1>  db %%end-%%beg,%6,size
  2027                              <1> %%name:
  2028 0000873C 494D554C3800        <1>  db %1,0
  2029                              <1> %%beg:
  2030                              <1>  %ifidni %4,none
  2031                              <1>  %2 %3
  2032                              <1>  %elifidni %5,none
  2033                              <1>  %2 %3,%4
  2034                              <1>  %else
  2035 00008742 6669C27700          <1>  %2 %3,%4,%5
  2036                              <1>  %endif
  2037 00008747 C3                  <1>  ret
  2038                              <1> %%end:
  2039                                  	defOp	"IMUL8",imul,ax,dx,-0x77,TYPE_MULTIPLY
  2040                              <1>  %ifidni %3,al
  2041                              <1>  %assign size SIZE_BYTE
  2042                              <1>  %elifidni %3,dl
  2043                              <1>  %assign size SIZE_BYTE
  2044                              <1>  %elifidni %3,ax
  2045                              <1>  %assign size SIZE_SHORT
  2046                              <1>  %elifidni %3,dx
  2047                              <1>  %assign size SIZE_SHORT
  2048                              <1>  %else
  2049                              <1>  %assign size SIZE_LONG
  2050                              <1>  %endif
  2051 00008748 060301              <1>  db %%end-%%beg,%6,size
  2052                              <1> %%name:
  2053 0000874B 494D554C3800        <1>  db %1,0
  2054                              <1> %%beg:
  2055                              <1>  %ifidni %4,none
  2056                              <1>  %2 %3
  2057                              <1>  %elifidni %5,none
  2058                              <1>  %2 %3,%4
  2059                              <1>  %else
  2060 00008751 6669C289FF          <1>  %2 %3,%4,%5
  2061                              <1>  %endif
  2062 00008756 C3                  <1>  ret
  2063                              <1> %%end:
  2064                                  	defOp	"IMUL8",imul,eax,edx,0x77,TYPE_MULTIPLY
  2065                              <1>  %ifidni %3,al
  2066                              <1>  %assign size SIZE_BYTE
  2067                              <1>  %elifidni %3,dl
  2068                              <1>  %assign size SIZE_BYTE
  2069                              <1>  %elifidni %3,ax
  2070                              <1>  %assign size SIZE_SHORT
  2071                              <1>  %elifidni %3,dx
  2072                              <1>  %assign size SIZE_SHORT
  2073                              <1>  %else
  2074                              <1>  %assign size SIZE_LONG
  2075                              <1>  %endif
  2076 00008757 070302              <1>  db %%end-%%beg,%6,size
  2077                              <1> %%name:
  2078 0000875A 494D554C3800        <1>  db %1,0
  2079                              <1> %%beg:
  2080                              <1>  %ifidni %4,none
  2081                              <1>  %2 %3
  2082                              <1>  %elifidni %5,none
  2083                              <1>  %2 %3,%4
  2084                              <1>  %else
  2085 00008760 69C277000000        <1>  %2 %3,%4,%5
  2086                              <1>  %endif
  2087 00008766 C3                  <1>  ret
  2088                              <1> %%end:
  2089                                  	defOp	"IMUL8",imul,eax,edx,-0x77,TYPE_MULTIPLY
  2090                              <1>  %ifidni %3,al
  2091                              <1>  %assign size SIZE_BYTE
  2092                              <1>  %elifidni %3,dl
  2093                              <1>  %assign size SIZE_BYTE
  2094                              <1>  %elifidni %3,ax
  2095                              <1>  %assign size SIZE_SHORT
  2096                              <1>  %elifidni %3,dx
  2097                              <1>  %assign size SIZE_SHORT
  2098                              <1>  %else
  2099                              <1>  %assign size SIZE_LONG
  2100                              <1>  %endif
  2101 00008767 070302              <1>  db %%end-%%beg,%6,size
  2102                              <1> %%name:
  2103 0000876A 494D554C3800        <1>  db %1,0
  2104                              <1> %%beg:
  2105                              <1>  %ifidni %4,none
  2106                              <1>  %2 %3
  2107                              <1>  %elifidni %5,none
  2108                              <1>  %2 %3,%4
  2109                              <1>  %else
  2110 00008770 69C289FFFFFF        <1>  %2 %3,%4,%5
  2111                              <1>  %endif
  2112 00008776 C3                  <1>  ret
  2113                              <1> %%end:
  2114                                  	defOp	"IMUL16",imul,ax,0x777,none,TYPE_MULTIPLY
  2115                              <1>  %ifidni %3,al
  2116                              <1>  %assign size SIZE_BYTE
  2117                              <1>  %elifidni %3,dl
  2118                              <1>  %assign size SIZE_BYTE
  2119                              <1>  %elifidni %3,ax
  2120                              <1>  %assign size SIZE_SHORT
  2121                              <1>  %elifidni %3,dx
  2122                              <1>  %assign size SIZE_SHORT
  2123                              <1>  %else
  2124                              <1>  %assign size SIZE_LONG
  2125                              <1>  %endif
  2126 00008777 060301              <1>  db %%end-%%beg,%6,size
  2127                              <1> %%name:
  2128 0000877A 494D554C313600      <1>  db %1,0
  2129                              <1> %%beg:
  2130                              <1>  %ifidni %4,none
  2131                              <1>  %2 %3
  2132                              <1>  %elifidni %5,none
  2133 00008781 6669C07707          <1>  %2 %3,%4
  2134                              <1>  %else
  2135                              <1>  %2 %3,%4,%5
  2136                              <1>  %endif
  2137 00008786 C3                  <1>  ret
  2138                              <1> %%end:
  2139                                  	defOp	"IMUL32",imul,eax,0x777777,none,TYPE_MULTIPLY
  2140                              <1>  %ifidni %3,al
  2141                              <1>  %assign size SIZE_BYTE
  2142                              <1>  %elifidni %3,dl
  2143                              <1>  %assign size SIZE_BYTE
  2144                              <1>  %elifidni %3,ax
  2145                              <1>  %assign size SIZE_SHORT
  2146                              <1>  %elifidni %3,dx
  2147                              <1>  %assign size SIZE_SHORT
  2148                              <1>  %else
  2149                              <1>  %assign size SIZE_LONG
  2150                              <1>  %endif
  2151 00008787 070302              <1>  db %%end-%%beg,%6,size
  2152                              <1> %%name:
  2153 0000878A 494D554C333200      <1>  db %1,0
  2154                              <1> %%beg:
  2155                              <1>  %ifidni %4,none
  2156                              <1>  %2 %3
  2157                              <1>  %elifidni %5,none
  2158 00008791 69C077777700        <1>  %2 %3,%4
  2159                              <1>  %else
  2160                              <1>  %2 %3,%4,%5
  2161                              <1>  %endif
  2162 00008797 C3                  <1>  ret
  2163                              <1> %%end:
  2164                                  	defOp	"DIVDL",div,dl,none,none,TYPE_DIVIDE
  2165                              <1>  %ifidni %3,al
  2166                              <1>  %assign size SIZE_BYTE
  2167                              <1>  %elifidni %3,dl
  2168                              <1>  %assign size SIZE_BYTE
  2169                              <1>  %elifidni %3,ax
  2170                              <1>  %assign size SIZE_SHORT
  2171                              <1>  %elifidni %3,dx
  2172                              <1>  %assign size SIZE_SHORT
  2173                              <1>  %else
  2174                              <1>  %assign size SIZE_LONG
  2175                              <1>  %endif
  2176 00008798 030400              <1>  db %%end-%%beg,%6,size
  2177                              <1> %%name:
  2178 0000879B 444956444C00        <1>  db %1,0
  2179                              <1> %%beg:
  2180                              <1>  %ifidni %4,none
  2181 000087A1 F6F2                <1>  %2 %3
  2182                              <1>  %elifidni %5,none
  2183                              <1>  %2 %3,%4
  2184                              <1>  %else
  2185                              <1>  %2 %3,%4,%5
  2186                              <1>  %endif
  2187 000087A3 C3                  <1>  ret
  2188                              <1> %%end:
  2189                                  	defOp	"DIVDX",div,dx,none,none,TYPE_DIVIDE
  2190                              <1>  %ifidni %3,al
  2191                              <1>  %assign size SIZE_BYTE
  2192                              <1>  %elifidni %3,dl
  2193                              <1>  %assign size SIZE_BYTE
  2194                              <1>  %elifidni %3,ax
  2195                              <1>  %assign size SIZE_SHORT
  2196                              <1>  %elifidni %3,dx
  2197                              <1>  %assign size SIZE_SHORT
  2198                              <1>  %else
  2199                              <1>  %assign size SIZE_LONG
  2200                              <1>  %endif
  2201 000087A4 040401              <1>  db %%end-%%beg,%6,size
  2202                              <1> %%name:
  2203 000087A7 444956445800        <1>  db %1,0
  2204                              <1> %%beg:
  2205                              <1>  %ifidni %4,none
  2206 000087AD 66F7F2              <1>  %2 %3
  2207                              <1>  %elifidni %5,none
  2208                              <1>  %2 %3,%4
  2209                              <1>  %else
  2210                              <1>  %2 %3,%4,%5
  2211                              <1>  %endif
  2212 000087B0 C3                  <1>  ret
  2213                              <1> %%end:
  2214                                  	defOp	"DIVEDX",div,edx,none,none,TYPE_DIVIDE
  2215                              <1>  %ifidni %3,al
  2216                              <1>  %assign size SIZE_BYTE
  2217                              <1>  %elifidni %3,dl
  2218                              <1>  %assign size SIZE_BYTE
  2219                              <1>  %elifidni %3,ax
  2220                              <1>  %assign size SIZE_SHORT
  2221                              <1>  %elifidni %3,dx
  2222                              <1>  %assign size SIZE_SHORT
  2223                              <1>  %else
  2224                              <1>  %assign size SIZE_LONG
  2225                              <1>  %endif
  2226 000087B1 030402              <1>  db %%end-%%beg,%6,size
  2227                              <1> %%name:
  2228 000087B4 44495645445800      <1>  db %1,0
  2229                              <1> %%beg:
  2230                              <1>  %ifidni %4,none
  2231 000087BB F7F2                <1>  %2 %3
  2232                              <1>  %elifidni %5,none
  2233                              <1>  %2 %3,%4
  2234                              <1>  %else
  2235                              <1>  %2 %3,%4,%5
  2236                              <1>  %endif
  2237 000087BD C3                  <1>  ret
  2238                              <1> %%end:
  2239                                  	defOp	"DIVAL",div,al,none,none,TYPE_DIVIDE
  2240                              <1>  %ifidni %3,al
  2241                              <1>  %assign size SIZE_BYTE
  2242                              <1>  %elifidni %3,dl
  2243                              <1>  %assign size SIZE_BYTE
  2244                              <1>  %elifidni %3,ax
  2245                              <1>  %assign size SIZE_SHORT
  2246                              <1>  %elifidni %3,dx
  2247                              <1>  %assign size SIZE_SHORT
  2248                              <1>  %else
  2249                              <1>  %assign size SIZE_LONG
  2250                              <1>  %endif
  2251 000087BE 030400              <1>  db %%end-%%beg,%6,size
  2252                              <1> %%name:
  2253 000087C1 444956414C00        <1>  db %1,0
  2254                              <1> %%beg:
  2255                              <1>  %ifidni %4,none
  2256 000087C7 F6F0                <1>  %2 %3
  2257                              <1>  %elifidni %5,none
  2258                              <1>  %2 %3,%4
  2259                              <1>  %else
  2260                              <1>  %2 %3,%4,%5
  2261                              <1>  %endif
  2262 000087C9 C3                  <1>  ret
  2263                              <1> %%end:
  2264                                  	defOp	"DIVAX",div,ax,none,none,TYPE_DIVIDE
  2265                              <1>  %ifidni %3,al
  2266                              <1>  %assign size SIZE_BYTE
  2267                              <1>  %elifidni %3,dl
  2268                              <1>  %assign size SIZE_BYTE
  2269                              <1>  %elifidni %3,ax
  2270                              <1>  %assign size SIZE_SHORT
  2271                              <1>  %elifidni %3,dx
  2272                              <1>  %assign size SIZE_SHORT
  2273                              <1>  %else
  2274                              <1>  %assign size SIZE_LONG
  2275                              <1>  %endif
  2276 000087CA 040401              <1>  db %%end-%%beg,%6,size
  2277                              <1> %%name:
  2278 000087CD 444956415800        <1>  db %1,0
  2279                              <1> %%beg:
  2280                              <1>  %ifidni %4,none
  2281 000087D3 66F7F0              <1>  %2 %3
  2282                              <1>  %elifidni %5,none
  2283                              <1>  %2 %3,%4
  2284                              <1>  %else
  2285                              <1>  %2 %3,%4,%5
  2286                              <1>  %endif
  2287 000087D6 C3                  <1>  ret
  2288                              <1> %%end:
  2289                                  	defOp	"DIVEAX",div,eax,none,none,TYPE_DIVIDE
  2290                              <1>  %ifidni %3,al
  2291                              <1>  %assign size SIZE_BYTE
  2292                              <1>  %elifidni %3,dl
  2293                              <1>  %assign size SIZE_BYTE
  2294                              <1>  %elifidni %3,ax
  2295                              <1>  %assign size SIZE_SHORT
  2296                              <1>  %elifidni %3,dx
  2297                              <1>  %assign size SIZE_SHORT
  2298                              <1>  %else
  2299                              <1>  %assign size SIZE_LONG
  2300                              <1>  %endif
  2301 000087D7 030402              <1>  db %%end-%%beg,%6,size
  2302                              <1> %%name:
  2303 000087DA 44495645415800      <1>  db %1,0
  2304                              <1> %%beg:
  2305                              <1>  %ifidni %4,none
  2306 000087E1 F7F0                <1>  %2 %3
  2307                              <1>  %elifidni %5,none
  2308                              <1>  %2 %3,%4
  2309                              <1>  %else
  2310                              <1>  %2 %3,%4,%5
  2311                              <1>  %endif
  2312 000087E3 C3                  <1>  ret
  2313                              <1> %%end:
  2314                                  	defOp	"IDIVDL",idiv,dl,none,none,TYPE_DIVIDE
  2315                              <1>  %ifidni %3,al
  2316                              <1>  %assign size SIZE_BYTE
  2317                              <1>  %elifidni %3,dl
  2318                              <1>  %assign size SIZE_BYTE
  2319                              <1>  %elifidni %3,ax
  2320                              <1>  %assign size SIZE_SHORT
  2321                              <1>  %elifidni %3,dx
  2322                              <1>  %assign size SIZE_SHORT
  2323                              <1>  %else
  2324                              <1>  %assign size SIZE_LONG
  2325                              <1>  %endif
  2326 000087E4 030400              <1>  db %%end-%%beg,%6,size
  2327                              <1> %%name:
  2328 000087E7 49444956444C00      <1>  db %1,0
  2329                              <1> %%beg:
  2330                              <1>  %ifidni %4,none
  2331 000087EE F6FA                <1>  %2 %3
  2332                              <1>  %elifidni %5,none
  2333                              <1>  %2 %3,%4
  2334                              <1>  %else
  2335                              <1>  %2 %3,%4,%5
  2336                              <1>  %endif
  2337 000087F0 C3                  <1>  ret
  2338                              <1> %%end:
  2339                                  	defOp	"IDIVDX",idiv,dx,none,none,TYPE_DIVIDE
  2340                              <1>  %ifidni %3,al
  2341                              <1>  %assign size SIZE_BYTE
  2342                              <1>  %elifidni %3,dl
  2343                              <1>  %assign size SIZE_BYTE
  2344                              <1>  %elifidni %3,ax
  2345                              <1>  %assign size SIZE_SHORT
  2346                              <1>  %elifidni %3,dx
  2347                              <1>  %assign size SIZE_SHORT
  2348                              <1>  %else
  2349                              <1>  %assign size SIZE_LONG
  2350                              <1>  %endif
  2351 000087F1 040401              <1>  db %%end-%%beg,%6,size
  2352                              <1> %%name:
  2353 000087F4 49444956445800      <1>  db %1,0
  2354                              <1> %%beg:
  2355                              <1>  %ifidni %4,none
  2356 000087FB 66F7FA              <1>  %2 %3
  2357                              <1>  %elifidni %5,none
  2358                              <1>  %2 %3,%4
  2359                              <1>  %else
  2360                              <1>  %2 %3,%4,%5
  2361                              <1>  %endif
  2362 000087FE C3                  <1>  ret
  2363                              <1> %%end:
  2364                                  	defOp	"IDIVEDX",idiv,edx,none,none,TYPE_DIVIDE
  2365                              <1>  %ifidni %3,al
  2366                              <1>  %assign size SIZE_BYTE
  2367                              <1>  %elifidni %3,dl
  2368                              <1>  %assign size SIZE_BYTE
  2369                              <1>  %elifidni %3,ax
  2370                              <1>  %assign size SIZE_SHORT
  2371                              <1>  %elifidni %3,dx
  2372                              <1>  %assign size SIZE_SHORT
  2373                              <1>  %else
  2374                              <1>  %assign size SIZE_LONG
  2375                              <1>  %endif
  2376 000087FF 030402              <1>  db %%end-%%beg,%6,size
  2377                              <1> %%name:
  2378 00008802 4944495645445800    <1>  db %1,0
  2379                              <1> %%beg:
  2380                              <1>  %ifidni %4,none
  2381 0000880A F7FA                <1>  %2 %3
  2382                              <1>  %elifidni %5,none
  2383                              <1>  %2 %3,%4
  2384                              <1>  %else
  2385                              <1>  %2 %3,%4,%5
  2386                              <1>  %endif
  2387 0000880C C3                  <1>  ret
  2388                              <1> %%end:
  2389                                  	defOp	"IDIVAL",idiv,al,none,none,TYPE_DIVIDE
  2390                              <1>  %ifidni %3,al
  2391                              <1>  %assign size SIZE_BYTE
  2392                              <1>  %elifidni %3,dl
  2393                              <1>  %assign size SIZE_BYTE
  2394                              <1>  %elifidni %3,ax
  2395                              <1>  %assign size SIZE_SHORT
  2396                              <1>  %elifidni %3,dx
  2397                              <1>  %assign size SIZE_SHORT
  2398                              <1>  %else
  2399                              <1>  %assign size SIZE_LONG
  2400                              <1>  %endif
  2401 0000880D 030400              <1>  db %%end-%%beg,%6,size
  2402                              <1> %%name:
  2403 00008810 49444956414C00      <1>  db %1,0
  2404                              <1> %%beg:
  2405                              <1>  %ifidni %4,none
  2406 00008817 F6F8                <1>  %2 %3
  2407                              <1>  %elifidni %5,none
  2408                              <1>  %2 %3,%4
  2409                              <1>  %else
  2410                              <1>  %2 %3,%4,%5
  2411                              <1>  %endif
  2412 00008819 C3                  <1>  ret
  2413                              <1> %%end:
  2414                                  	defOp	"IDIVAX",idiv,ax,none,none,TYPE_DIVIDE
  2415                              <1>  %ifidni %3,al
  2416                              <1>  %assign size SIZE_BYTE
  2417                              <1>  %elifidni %3,dl
  2418                              <1>  %assign size SIZE_BYTE
  2419                              <1>  %elifidni %3,ax
  2420                              <1>  %assign size SIZE_SHORT
  2421                              <1>  %elifidni %3,dx
  2422                              <1>  %assign size SIZE_SHORT
  2423                              <1>  %else
  2424                              <1>  %assign size SIZE_LONG
  2425                              <1>  %endif
  2426 0000881A 040401              <1>  db %%end-%%beg,%6,size
  2427                              <1> %%name:
  2428 0000881D 49444956415800      <1>  db %1,0
  2429                              <1> %%beg:
  2430                              <1>  %ifidni %4,none
  2431 00008824 66F7F8              <1>  %2 %3
  2432                              <1>  %elifidni %5,none
  2433                              <1>  %2 %3,%4
  2434                              <1>  %else
  2435                              <1>  %2 %3,%4,%5
  2436                              <1>  %endif
  2437 00008827 C3                  <1>  ret
  2438                              <1> %%end:
  2439                                  	defOp	"IDIVEAX",idiv,eax,none,none,TYPE_DIVIDE
  2440                              <1>  %ifidni %3,al
  2441                              <1>  %assign size SIZE_BYTE
  2442                              <1>  %elifidni %3,dl
  2443                              <1>  %assign size SIZE_BYTE
  2444                              <1>  %elifidni %3,ax
  2445                              <1>  %assign size SIZE_SHORT
  2446                              <1>  %elifidni %3,dx
  2447                              <1>  %assign size SIZE_SHORT
  2448                              <1>  %else
  2449                              <1>  %assign size SIZE_LONG
  2450                              <1>  %endif
  2451 00008828 030402              <1>  db %%end-%%beg,%6,size
  2452                              <1> %%name:
  2453 0000882B 4944495645415800    <1>  db %1,0
  2454                              <1> %%beg:
  2455                              <1>  %ifidni %4,none
  2456 00008833 F7F8                <1>  %2 %3
  2457                              <1>  %elifidni %5,none
  2458                              <1>  %2 %3,%4
  2459                              <1>  %else
  2460                              <1>  %2 %3,%4,%5
  2461                              <1>  %endif
  2462 00008835 C3                  <1>  ret
  2463                              <1> %%end:
  2464 00008836 00                      	db	0
  2465                                  
  2466 00008837 90                      	align	4
  2467                                  
  2468                                  typeMasks:
  2469 00008838 D5080000                	dd	PS_ARITH
  2470 0000883C D5080000                	dd	PS_ARITH
  2471 00008840 C5080000                	dd	PS_LOGIC
  2472 00008844 01080000                	dd	PS_MULTIPLY
  2473 00008848 00000000                	dd	PS_DIVIDE
  2474                                  
  2475                                  arithValues:
  2476 0000884C 000000000100000002-     .bvals:	dd	0x00,0x01,0x02,0x7E,0x7F,0x80,0x81,0xFE,0xFF
  2477 00008855 0000007E0000007F00-
  2478 0000885E 000080000000810000-
  2479 00008867 00FE000000FF000000 
  2480                                  	ARITH_BYTES equ ($-.bvals)/4
  2481                                  
  2482 00008870 000000000100000002-     .wvals:	dd	0x0000,0x0001,0x0002,0x7FFE,0x7FFF,0x8000,0x8001,0xFFFE,0xFFFF
  2483 00008879 000000FE7F0000FF7F-
  2484 00008882 000000800000018000-
  2485 0000888B 00FEFF0000FFFF0000 
  2486                                  	ARITH_WORDS equ ($-.wvals)/4
  2487                                  
  2488 00008894 000000000100000002-     .dvals:	dd	0x00000000,0x00000001,0x00000002,0x7FFFFFFE,0x7FFFFFFF,0x80000000,0x80000001,0xFFFFFFFE,0xFFFFFFFF
  2489 0000889D 000000FEFFFF7FFFFF-
  2490 000088A6 FF7F00000080010000-
  2491 000088AF 80FEFFFFFFFFFFFFFF 
  2492                                  	ARITH_DWORDS equ ($-.dvals)/4
  2493                                  
  2494                                  muldivValues:
  2495 000088B8 000000000100000002-     .bvals:	dd	0x00,0x01,0x02,0x3F,0x40,0x41,0x7E,0x7F,0x80,0x81,0xFE,0xFF
  2496 000088C1 0000003F0000004000-
  2497 000088CA 0000410000007E0000-
  2498 000088D3 007F00000080000000-
  2499 000088DC 81000000FE000000FF-
  2500 000088E5 000000             
  2501                                  	MULDIV_BYTES equ ($-.bvals)/4
  2502                                  
  2503 000088E8 000000000100000002-     .wvals:	dd	0x0000,0x0001,0x0002,0x3FFF,0x4000,0x4001,0x7FFE,0x7FFF,0x8000,0x8001,0xFFFE,0xFFFF
  2504 000088F1 000000FF3F00000040-
  2505 000088FA 000001400000FE7F00-
  2506 00008903 00FF7F000000800000-
  2507 0000890C 01800000FEFF0000FF-
  2508 00008915 FF0000             
  2509                                  	MULDIV_WORDS equ ($-.wvals)/4
  2510                                  
  2511 00008918 000000000100000002-     .dvals:	dd	0x00000000,0x00000001,0x00000002,0x3FFFFFFF,0x40000000,0x40000001,0x7FFFFFFE,0x7FFFFFFF,0x80000000,0x80000001,0xFFFFFFFE,0xFFFFFFFF
  2512 00008921 000000FFFFFF3F0000-
  2513 0000892A 004001000040FEFFFF-
  2514 00008933 7FFFFFFF7F00000080-
  2515 0000893C 01000080FEFFFFFFFF-
  2516 00008945 FFFFFF             
  2517                                  	MULDIV_DWORDS equ ($-.dvals)/4
  2518                                  
  2519                                  typeValues:
  2520                                  	;
  2521                                  	; Values for TYPE_ARITH
  2522                                  	;
  2523 00008948 09000000[4C880000]-     	dd	ARITH_BYTES,arithValues,ARITH_BYTES,arithValues
  2524 00008950 09000000[4C880000] 
  2525 00008958 12000000[4C880000]-     	dd	ARITH_BYTES+ARITH_WORDS,arithValues,ARITH_BYTES+ARITH_WORDS,arithValues
  2526 00008960 12000000[4C880000] 
  2527 00008968 1B000000[4C880000]-     	dd	ARITH_BYTES+ARITH_WORDS+ARITH_DWORDS,arithValues,ARITH_BYTES+ARITH_WORDS+ARITH_DWORDS,arithValues
  2528 00008970 1B000000[4C880000] 
  2529 00008978 000000000000000000-     	dd	0,0,0,0
  2530 00008981 00000000000000     
  2531                                  	;
  2532                                  	; Values for TYPE_ARITH1
  2533                                  	;
  2534 00008988 09000000[4C880000]-     	dd	ARITH_BYTES,arithValues,1,arithValues
  2535 00008990 01000000[4C880000] 
  2536 00008998 12000000[4C880000]-     	dd	ARITH_BYTES+ARITH_WORDS,arithValues,1,arithValues
  2537 000089A0 01000000[4C880000] 
  2538 000089A8 1B000000[4C880000]-     	dd	ARITH_BYTES+ARITH_WORDS+ARITH_DWORDS,arithValues,1,arithValues
  2539 000089B0 01000000[4C880000] 
  2540 000089B8 000000000000000000-     	dd	0,0,0,0
  2541 000089C1 00000000000000     
  2542                                  	;
  2543                                  	; Values for TYPE_LOGIC (using ARITH values for now)
  2544                                  	;
  2545 000089C8 09000000[4C880000]-     	dd	ARITH_BYTES,arithValues,ARITH_BYTES,arithValues
  2546 000089D0 09000000[4C880000] 
  2547 000089D8 12000000[4C880000]-     	dd	ARITH_BYTES+ARITH_WORDS,arithValues,ARITH_BYTES+ARITH_WORDS,arithValues
  2548 000089E0 12000000[4C880000] 
  2549 000089E8 1B000000[4C880000]-     	dd	ARITH_BYTES+ARITH_WORDS+ARITH_DWORDS,arithValues,ARITH_BYTES+ARITH_WORDS+ARITH_DWORDS,arithValues
  2550 000089F0 1B000000[4C880000] 
  2551 000089F8 000000000000000000-     	dd	0,0,0,0
  2552 00008A01 00000000000000     
  2553                                  	;
  2554                                  	; Values for TYPE_MULTIPLY (a superset of ARITH values)
  2555                                  	;
  2556 00008A08 0C000000[B8880000]-     	dd	MULDIV_BYTES,muldivValues,MULDIV_BYTES,muldivValues
  2557 00008A10 0C000000[B8880000] 
  2558 00008A18 18000000[B8880000]-     	dd	MULDIV_BYTES+MULDIV_WORDS,muldivValues,MULDIV_BYTES+MULDIV_WORDS,muldivValues
  2559 00008A20 18000000[B8880000] 
  2560 00008A28 24000000[B8880000]-     	dd	MULDIV_BYTES+MULDIV_WORDS+MULDIV_DWORDS,muldivValues,MULDIV_BYTES+MULDIV_WORDS+MULDIV_DWORDS,muldivValues
  2561 00008A30 24000000[B8880000] 
  2562 00008A38 000000000000000000-     	dd	0,0,0,0
  2563 00008A41 00000000000000     
  2564                                  	;
  2565                                  	; Values for TYPE_DIVIDE
  2566                                  	;
  2567 00008A48 0C000000[B8880000]-     	dd	MULDIV_BYTES,muldivValues,MULDIV_BYTES,muldivValues
  2568 00008A50 0C000000[B8880000] 
  2569 00008A58 18000000[B8880000]-     	dd	MULDIV_BYTES+MULDIV_WORDS,muldivValues,MULDIV_BYTES+MULDIV_WORDS,muldivValues
  2570 00008A60 18000000[B8880000] 
  2571 00008A68 24000000[B8880000]-     	dd	MULDIV_BYTES+MULDIV_WORDS+MULDIV_DWORDS,muldivValues,MULDIV_BYTES+MULDIV_WORDS+MULDIV_DWORDS,muldivValues
  2572 00008A70 24000000[B8880000] 
  2573 00008A78 000000000000000000-     	dd	0,0,0,0
  2574 00008A81 00000000000000     
  2575                                  
  2576 00008A88 EBFE                    error:	jmp	error
  2577                                  
  2578 00008A8A 90<rept>                	times	OFF_INTDIVERR-0x100-($-$$) nop
  2579                                  
  2580                                  intDivErr:
  2581 0000DF00 56                      	push	esi
  2582 0000DF01 BE[A2850000]            	mov	esi,strDE
  2583 0000DF06 E852A6FFFF              	call	printStr
  2584 0000DF0B 5E                      	pop	esi
  2585                                  ;
  2586                                  ;   It's rather annoying that the 80386 treats #DE as a fault rather than a trap, leaving CS:EIP pointing to the
  2587                                  ;   faulting instruction instead of the RET we conveniently placed after it.  So, instead of trying to calculate where
  2588                                  ;   that RET is, we simply set EIP on the stack to point to our own RET.
  2589                                  ;
  2590 0000DF0C C7842400000000-         	mov	dword [esp],intDivRet
  2591 0000DF13 [18DF0000]         
  2592 0000DF17 CF                      	iretd
  2593                                  intDivRet:
  2594 0000DF18 C3                      	ret
  2595                                  
  2596                                  doneProt:
  2597 0000DF19 66B81800                	mov	ax,DSEG_PROT16
  2598 0000DF1D 8ED0                    	mov	ss,ax
  2599 0000DF1F 29E4                    	sub	esp,esp
  2600                                  
  2601                                      %ifndef REAL32
  2602                                  ;
  2603                                  ;   Return to real-mode, after first resetting the IDTR and loading CS with a 16-bit code segment
  2604                                  ;
  2605 0000DF21 2E0F011D[A0800000]      	o32 lidt [cs:addrIDTReal]
  2606 0000DF29 EA[30DF0000]0800        	jmp	CSEG_PROT16:toProt16
  2607                                  toProt16:
  2608                                  	bits	16
  2609                                      %endif
  2610                                  
  2611                                  goReal:
  2612 0000DF30 0F20C0                  	mov	eax,cr0
  2613 0000DF33 6625FEFFFF7F            	and	eax,~(CR0_MSW_PE | CR0_PG) & 0xffffffff
  2614 0000DF39 0F22C0                  	mov	cr0,eax
  2615                                  jmpReal:
  2616 0000DF3C EA[41DF]00F0            	jmp	CSEG_REAL:toReal
  2617                                  
  2618                                  toReal:
  2619 0000DF41 8CC8                    	mov	ax,cs				; revert to the usual .COM register conventions
  2620 0000DF43 8ED8                    	mov	ds,ax
  2621 0000DF45 8EC0                    	mov	es,ax
  2622 0000DF47 8ED0                    	mov	ss,ax
  2623 0000DF49 BCFEFF                  	mov	sp,0xfffe
  2624                                  
  2625 0000DF4C 3D00F0                  	cmp	ax,CSEG_REAL			; is CS equal to 0xf000?
  2626 0000DF4F 74FE                    spin:	je	spin ; near jmpStart		; yes, so loop around, because we have nowhere else to go
  2627 0000DF51 CD20                    	int	INT_DOSEXIT			; no, so assume we're running under DOS and exit
  2628                                  
  2629                                  ;
  2630                                  ;   Fill the remaining space with NOPs until we get to target offset 0xFFF0.
  2631                                  ;   Note that we subtract 0x100 from the target offset because we're ORG'ed at 0x100.
  2632                                  ;
  2633 0000DF53 90<rept>                	times	0xfff0-0x100-($-$$) nop
  2634                                  
  2635                                  ;
  2636                                  ;   Unfortunately, when PC-DOS 2.0 loads our .COM file, the last 4 bytes are not valid, in part because DOS must
  2637                                  ;   zero the last 2 bytes so that a near RET will return to the PSP's INT 0x20 and gracefully terminate the program.
  2638                                  ;   Newer versions of DOS simply refuse to load the file (the safest thing to do), claiming insufficient memory.
  2639                                  ;
  2640                                  ;   To avoid these loading issues, I now omit the last 4 bytes from image, and it will still work as a ROM image as
  2641                                  ;   long as jmpStart is at offset 0xFFF0.
  2642                                  ;
  2643                                  
  2644                                  jmpStart:
  2645 0000FEF0 EA[0000]00F0            	jmp	CSEG_REAL:start			; 0000FFF0
  2646                                  signedWord:
  2647 0000FEF5 80                      	db	0x80				; 0000FFF5  80
  2648                                  signedByte:
  2649 0000FEF6 80                      	db	0x80				; 0000FFF6  80
  2650                                  signature:
  2651 0000FEF7 50434A5300              	db	'PCJS',0			; 0000FFF7  "PCJS",0
  2652                                  ;	db	0x00				; 0000FFFC  00
  2653                                  ;	db	0x00				; 0000FFFD  00
  2654                                  ;	db	0xFC				; 0000FFFE  FC (Model ID byte)
  2655                                  ;	db	0x00				; 0000FFFF  00 (normally a checksum byte)
