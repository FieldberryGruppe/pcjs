Microsoft (R) Macro Assembler  Version 4.00                 3/15/18 17:49:36

download.asm                                                Page     1-1
                                                            

                                	title	download.asm 
                                	page	,120 
                                 
                                ;	By Jeff Parsons (@jeffpar) 2018-03-15 
                                ;	Monitors INT 14h for file download requests 
                                 
 = 0001                         DEBUG	equ	1 
 = 0400                         MAXBLK	equ	1024 
 = 000C                         MAXNAM	equ	12 
                                 
 0000                           code	segment word public 'code' 
                                 
 0100                           	org	100h 
                                 
                                	assume	cs:code, ds:code, es:code, ss:code 
                                 
 0100                           main	proc	near 
 0100  E8 02A3 R                	call	chkCOM			; verify that INT14.COM is installed 
 0103  72 05                    	jc	m1a			; abort 
                                 
 0105  E8 022F R                m1:	call	readB			; read a COM byte 
 0108  73 02                    	jnc	m2			; got one 
                                 
 010A  CD 20                    m1a:	int	20h			; abort 
                                 
 010C  3C 06                    m2:	cmp	al,06h			; Ctrl-F? 
 010E  75 F5                    	jne	m1			; no 
                                 
 0110  BA 077F R                	mov	dx,offset begXFR	; beginning transfer message 
 0113  B4 09                    	mov	ah,09h 
 0115  CD 21                    	int	21h 
                                 
 0117  E8 01EC R                	call	readBlk			; read initial block (with file info) 
 011A  72 0D                    	jc	m3a			; on error, just start over 
                                 
 011C  AC                       	lodsb 
 011D  3C 7C                    	cmp	al,'|' 
 011F  75 34                    	jne	m4x 
 0121  BF 0718 R                	mov	di,offset fName 
 0124  B9 000C                  	mov	cx,MAXNAM 
 0127  3B DE                    m3:	cmp	bx,si 
 0129  72 14                    m3a:	jb	m4a 
 012B  AC                       	lodsb 
 012C  3C 7C                    	cmp	al,'|' 
 012E  74 06                    	je	m4 
 0130  49                       	dec	cx 
 0131  7C F4                    	jl	m3 
 0133  AA                       	stosb 
 0134  EB F1                    	jmp	m3 
                                 
 0136  C6 05 00                 m4:	mov	byte ptr [di],0		; file name complete 
                                 
                                	; 
                                	; Next up: the file's size, as 8 hex digits 
Microsoft (R) Macro Assembler  Version 4.00                 3/15/18 17:49:36

download.asm                                                Page     1-2
                                                            

                                	; 
 0139  B9 0008                  	mov	cx,8			; CX == # digits 
 013C  E8 0269 R                	call	getHex			; DS:SI -> hex digits, BX is still buffer limit 
 013F  72 14                    m4a:	jc	m4x 
 0141  A3 0725 R                	mov	fSize,ax 
 0144  89 16 0727 R             	mov	fSize+2,dx 
                                 
 0148  AC                       	lodsb 
 0149  3C 7C                    	cmp	al,'|' 
 014B  75 08                    	jne	m4x			; missing separator 
                                 
                                	; 
                                	; Next up: the file's date and time, also as 8 hex digits 
                                	; 
 014D  B9 0008                  	mov	cx,8			; CX == # digits 
 0150  E8 0269 R                	call	getHex			; DS:SI -> hex digits, BX is still buffer limit 
 0153  73 03                    	jnc	m5 
 0155  E9 01E2 R                m4x:	jmp	m8 
                                 
 0158  A3 072B R                m5:	mov	fTime,ax 
 015B  89 16 0729 R             	mov	fDate,dx 
                                 
 015F  8A 04                    	mov	al,[si] 
 0161  3C 7C                    	cmp	al,'|' 
 0163  75 F0                    	jne	m4x			; missing separator 
                                 
 0165  3B DE                    	cmp	bx,si			; are we exactly at the boundary now? 
 0167  75 EC                    	jne	m4x			; no 
                                 
 0169  BA 079F R                	mov	dx,offset goXFR 
 016C  B4 09                    	mov	ah,09h 
 016E  CD 21                    	int	21h 
                                 
 0170  BA 0718 R                	mov	dx,offset fName		; DX -> file name 
 0173  8B CF                    	mov	cx,di			; DI still points to the end of the file name 
 0175  2B CA                    	sub	cx,dx			; CX == length of file name 
 0177  BB 0001                  	mov	bx,1			; BX == STDOUT 
 017A  B4 40                    	mov	ah,40h			; display the filename 
 017C  CD 21                    	int	21h 
                                 
 017E  52                       	push	dx 
 017F  BA 079C R                	mov	dx,offset crLF 
 0182  B4 09                    	mov	ah,09h 
 0184  CD 21                    	int	21h 
 0186  5A                       	pop	dx 
                                 
 0187  2B C9                    	sub	cx,cx			; CX == no special attributes 
 0189  B4 3C                    	mov	ah,3Ch			; create the file 
 018B  CD 21                    	int	21h 
 018D  73 05                    	jnc	m5b 
                                 
 018F  BA 07CB R                m5a:	mov	dx,offset filErr 
 0192  EB 51                    	jmp	short m8a 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 3/15/18 17:49:36

download.asm                                                Page     1-3
                                                            

 0194  A3 072D R                m5b:	mov	fHandle,ax 
 0197  93                       	xchg	bx,ax 
                                 
 0198  B8 010D                  m6:	mov	ax,010Dh		; send a Ctrl-M accepting the last 
 019B  8B 16 0312 R             	mov	dx,comID		; block and requesting the next block 
 019F  CD 14                    	int	14h 
 01A1  F6 C4 80                 	test	ah,80h 
 01A4  75 3C                    	jnz	m8 
                                 
 01A6  83 3E 0725 R 00          	cmp	fSize,0 
 01AB  75 07                    	jne	m7 
 01AD  83 3E 0727 R 00          	cmp	fSize+2,0 
 01B2  74 23                    	je	m7x 
                                 
 01B4  E8 01EC R                m7:	call	readBlk 
 01B7  72 29                    	jc	m8 
 01B9  8B D6                    	mov	dx,si 
 01BB  8B CB                    	mov	cx,bx 
 01BD  2B CA                    	sub	cx,dx 
 01BF  41                       	inc	cx 
 01C0  8B 1E 072D R             	mov	bx,fHandle 
 01C4  B4 40                    	mov	ah,40h 
 01C6  CD 21                    	int	21h 
 01C8  72 C5                    	jc	m5a 
 01CA  29 0E 0725 R             	sub	fSize,cx 
 01CE  83 1E 0727 R 00          	sbb	fSize+2,0 
 01D3  72 BA                    	jc	m5a			; the remaining file size underflowed 
 01D5  EB C1                    	jmp	m6 
                                 
 01D7  B4 3E                    m7x:	mov	ah,3Eh			; close the file now 
 01D9  CD 21                    	int	21h 
 01DB  72 B2                    	jc	m5a 
                                 
 01DD  BA 07B2 R                	mov	dx,offset doneXFR 
 01E0  EB 03                    	jmp	short m8a 
                                 
 01E2  BA 07E3 R                m8:	mov	dx,offset reqErr 
                                 
 01E5  B4 09                    m8a:	mov	ah,09h 
 01E7  CD 21                    	int	21h 
 01E9  E9 0105 R                	jmp	m1 
                                main	endp 
                                 
                                ; 
                                ; Read a block of data into our block buffer. 
                                ; 
                                ; If successful, CARRY is clear and SI and BX are 
                                ; set to the start and end of the buffer, respectively. 
                                ; 
 01EC                           readBlk	proc	near 
 01EC  51                       	push	cx 
 01ED  57                       	push	di 
 01EE  E8 024E R                	call	readBB			; read block byte 
 01F1  72 39                    	jc	rblk9			; error, pass it on to caller 
Microsoft (R) Macro Assembler  Version 4.00                 3/15/18 17:49:36

download.asm                                                Page     1-4
                                                            

 01F3  8A C8                    	mov	cl,al 
 01F5  E8 024E R                	call	readBB 
 01F8  72 32                    	jc	rblk9 
 01FA  8A E8                    	mov	ch,al			; CX now has 16-bit block length 
 01FC  81 F9 0401               	cmp	cx,MAXBLK+1		; too large? 
 0200  F5                       	cmc 
 0201  72 29                    	jc	rblk9			; yes 
 0203  89 0E 0716 R             	mov	blklen,cx		; save block length 
 0207  B4 00                    	mov	ah,0			; AH == CRC 
 0209  FC                       	cld 
 020A  BF 0316 R                	mov	di,offset block		; DI -> block buffer 
 020D  E8 024E R                rblk1:	call	readBB			; read a byte 
 0210  72 1A                    	jc	rblk9			; exit on error 
 0212  AA                       	stosb				; save the byte 
 0213  02 E0                    	add	ah,al			; update the CRC 
 0215  E2 F6                    	loop	rblk1			; loop for more 
 0217  E8 024E R                	call	readBB			; read one more byte: the CRC byte 
 021A  72 10                    	jc	rblk9 
 021C  3A C4                    	cmp	al,ah			; CRC match? 
 021E  F9                       	stc 
 021F  75 0B                    	jne	rblk9			; no 
                                 
                                	; 
                                	; Set SI and BX to the start and end of the block buffer 
                                	; 
 0221  BE 0316 R                	mov	si,offset block 
 0224  8B DE                    	mov	bx,si 
 0226  03 1E 0716 R             	add	bx,blklen 
 022A  4B                       	dec	bx			; BX is maximum block address 
 022B  F8                       	clc 
                                 
 022C  5F                       rblk9:	pop	di 
 022D  59                       	pop	cx 
 022E  C3                       	ret 
                                readBlk	endp 
                                 
                                ; 
                                ; Read a character from the COM port. 
                                ; 
                                ; If CARRY is clear, AL has the character.  No other registers modified. 
                                ; 
 022F                           readB	proc	near 
 022F  51                       	push	cx 
 0230  52                       	push	dx 
 0231  91                       	xchg	cx,ax			; save AH (in CH) 
                                 
 0232  8B 16 0312 R             rb1:	mov	dx,comID		; DX == adapter # 
 0236  B4 02                    	mov	ah,2			; AH == read request 
 0238  CD 14                    	int	14h			; do INT 14h 
 023A  84 E4                    	test	ah,ah			; anything (valid) available yet? 
 023C  74 0B                    	jz	rb9			; yes (and CARRY is clear) 
                                 
 023E  B4 01                    	mov	ah,1			; peek the keyboard 
 0240  CD 16                    	int	16h			; anything? 
Microsoft (R) Macro Assembler  Version 4.00                 3/15/18 17:49:36

download.asm                                                Page     1-5
                                                            

 0242  74 EE                    	jz	rb1			; no 
 0244  3C 1B                    	cmp	al,1Bh			; ESC? 
 0246  75 EA                    	jne	rb1			; no 
 0248  F9                       	stc				; set CARRY to indicate error/abort 
                                 
 0249  8A E5                    rb9:	mov	ah,ch			; restore AH 
 024B  5A                       	pop	dx 
 024C  59                       	pop	cx 
 024D  C3                       	ret 
                                readB	endp 
                                 
                                ; 
                                ; Read a block byte from the COM port. 
                                ; 
                                ; If CARRY is clear, AL has the character.  No other registers modified. 
                                ; 
 024E                           readBB	proc	near 
 024E  E8 022F R                	call	readB			; read a byte 
 0251  72 15                    	jc	rbb9			; abort 
 0253  3C 5E                    	cmp	al,'^'			; control character lead byte? 
 0255  F8                       	clc				; 
 0256  75 10                    	jne	rbb9			; no, return as-is 
 0258  E8 022F R                	call	readB			; read another byte 
 025B  72 0B                    	jc	rbb9			; abort 
 025D  3C 5E                    	cmp	al,'^'			; special double lead byte sequence? 
 025F  74 07                    	je	rbb9			; yes, pass through 
 0261  2C 40                    	sub	al,'@' 
 0263  72 03                    	jb	rbb9			; invalid sequence 
 0265  3C 1C                    	cmp	al,28			; in the control-character range? 
 0267  F5                       	cmc				; set carry if not 
 0268  C3                       rbb9:	ret 
                                readBB	endp 
                                 
                                ; 
                                ; Get CX hex characters from the block buffer at SI (up to BX) and convert to a number i
				n DX:AX. 
                                ; 
 0269                           getHex	proc	near 
 0269  57                       	push	di 
 026A  2B C0                    	sub	ax,ax 
 026C  2B FF                    	sub	di,di 
 026E  2B D2                    	sub	dx,dx			; DX:DI will accumulate the result 
                                 
 0270  FC                       	cld 
 0271  3B DE                    gh1:	cmp	bx,si			; still in bounds? 
 0273  72 2C                    	jb	gh9			; no 
 0275  AC                       	lodsb 
 0276  2C 30                    	sub	al,'0' 
 0278  72 27                    	jb	gh9			; error, invalid digit 
 027A  3C 0A                    	cmp	al,10			; was the digit 0-9? 
 027C  72 0B                    	jb	gh2			; yes 
 027E  2C 07                    	sub	al,'A'-'0'-10		; assuming it was A-F, subtract a bit more 
 0280  3C 0A                    	cmp	al,10			; did we get 10-15 as a result? 
 0282  72 1D                    	jb	gh9			; no 
Microsoft (R) Macro Assembler  Version 4.00                 3/15/18 17:49:36

download.asm                                                Page     1-6
                                                            

 0284  3C 10                    	cmp	al,16 
 0286  F5                       	cmc 
 0287  72 18                    	jb	gh9 
 0289  0B F8                    gh2:	or	di,ax 
 028B  49                       	dec	cx 
 028C  7E 12                    	jle	gh8 
 028E  D1 E7                    	shl	di,1			; shift DX:DI left 4 bits for next digit 
 0290  D1 D2                    	rcl	dx,1 
 0292  D1 E7                    	shl	di,1 
 0294  D1 D2                    	rcl	dx,1 
 0296  D1 E7                    	shl	di,1 
 0298  D1 D2                    	rcl	dx,1 
 029A  D1 E7                    	shl	di,1 
 029C  D1 D2                    	rcl	dx,1 
 029E  EB D1                    	jmp	gh1 
                                 
 02A0  97                       gh8:	xchg	ax,di			; result is now in DX:AX 
                                 
 02A1  5F                       gh9:	pop	di 
 02A2  C3                       	ret 
                                getHex	endp 
                                 
                                ; 
                                ; Check for a /1 or /2 to determine which adapter we should monitor. 
                                ; 
 02A3                           chkCom	proc	near 
 02A3  FC                       	cld 
 02A4  BE 0080                  	mov	si,80h			; DS:SI -> command line 
 02A7  AC                       	lodsb 
 02A8  98                       	cbw 
 02A9  91                       	xchg	cx,ax			; CX == line length (as a fail-safe) 
 02AA  AC                       chk1:	lodsb 
 02AB  49                       	dec	cx 
 02AC  3C 0D                    	cmp	al,0Dh			; end of command-line? 
 02AE  74 14                    	je	chk3			; yes 
 02B0  3C 2F                    	cmp	al,'/' 
 02B2  75 0C                    	jne	chk2 
 02B4  AC                       	lodsb 
 02B5  49                       	dec	cx 
 02B6  3C 31                    	cmp	al,'1'			; /1? 
 02B8  75 06                    	jne	chk2			; no 
 02BA  81 06 0314 R 0100        	add	comAddr,100h		; bump 2F8h to 3F8h 
 02C0  85 C9                    chk2:	test	cx,cx			; any more command-line characters? 
 02C2  7F E6                    	jg	chk1			; yes 
                                 
 02C4  06                       chk3:	push	es 
 02C5  2B C0                    	sub	ax,ax 
 02C7  8E C0                    	mov	es,ax 
                                	assume	es:nothing		; since ES is zero 
                                 
 02C9  A1 0314 R                	mov	ax,comAddr 
 02CC  BB 0400                  	mov	bx,400h			; access RBDA @0:400 instead of 40:0 
 02CF  2B D2                    	sub	dx,dx 
 02D1  26: 39 07                chk4:	cmp	word ptr es:[bx],ax	; matching port? 
Microsoft (R) Macro Assembler  Version 4.00                 3/15/18 17:49:36

download.asm                                                Page     1-7
                                                            

 02D4  74 12                    	je	chk5			; yes 
 02D6  43                       	inc	bx 
 02D7  43                       	inc	bx 
 02D8  42                       	inc	dx 
 02D9  80 FA 04                 	cmp	dl,4 
 02DC  72 F3                    	jb	chk4 
 02DE  BA 076A R                	mov	dx,offset errMsg	; no matching port was found; abort 
 02E1  B4 09                    	mov	ah,09h 
 02E3  CD 21                    	int	21h 
 02E5  F9                       	stc 
 02E6  EB 28                    	jmp	short chk9 
                                 
 02E8  89 16 0312 R             chk5:	mov	comID,dx		; comID is 0 for COM1, 1 for COM2, etc. 
 02EC  B4 AA                    	mov	ah,0AAh			; quick-and-dirty INT14.COM installation check 
 02EE  CD 14                    	int	14h 
 02F0  F6 D4                    	not	ah 
 02F2  80 FC AA                 	cmp	ah,0AAh 
 02F5  74 0A                    	je	chk6 
 02F7  BA 0740 R                	mov	dx,offset chkMsg	; INT14.COM needs to be installed for that port first 
 02FA  B4 09                    	mov	ah,09h 
 02FC  CD 21                    	int	21h 
 02FE  F9                       	stc 
 02FF  EB 0F                    	jmp	short chk9 
                                 
 0301  80 C2 31                 chk6:	add	dl,'1' 
 0304  88 16 0732 R             	mov	comMsg+3,dl 
 0308  BA 072F R                	mov	dx,offset comMsg 
 030B  B4 09                    	mov	ah,09h 
 030D  CD 21                    	int	21h 
 030F  F8                       	clc 
                                 
 0310  07                       chk9:	pop	es 
                                	assume	es:code 
 0311  C3                       	ret 
                                chkCOM	endp 
                                 
 0312  FFFF                     comID	dw	-1			; 0-based index of COM port in BIOS data area 
 0314  02F8                     comAddr	dw	2F8h 
                                 
 0316  0400[                    block	db	MAXBLK dup (?) 
            ??                  
                         ]      
                                
 0716  0000                     blklen	dw	0 
 0718  000D[                    fName	db	MAXNAM+1 dup (0)	; enough space for an 8.3 name plus terminating NUL 
            00                  
                         ]      
                                
 0725  0000 0000                fSize	dw	0,0 
 0729  0000                     fDate	dw	0 
 072B  0000                     fTime	dw	0 
 072D  0000                     fHandle	dw	0 
                                 
 072F  43 4F 4D 3F 20 6D 6F     comMsg	db	"COM? monitored",13,10,'$' 
Microsoft (R) Macro Assembler  Version 4.00                 3/15/18 17:49:36

download.asm                                                Page     1-8
                                                            

       6E 69 74 6F 72 65 64     
       0D 0A 24                 
 0740  52 75 6E 20 49 4E 54     chkMsg	db	"Run INT14 to install I/O handlers first",13,10,'$' 
       31 34 20 74 6F 20 69     
       6E 73 74 61 6C 6C 20     
       49 2F 4F 20 68 61 6E     
       64 6C 65 72 73 20 66     
       69 72 73 74 0D 0A 24     
 076A  43 4F 4D 20 70 6F 72     errMsg	db	"COM port not found",13,10,'$' 
       74 20 6E 6F 74 20 66     
       6F 75 6E 64 0D 0A 24     
                                 
 077F  52 65 63 65 69 76 69     begXFR	db	"Receiving transfer request..." 
       6E 67 20 74 72 61 6E     
       73 66 65 72 20 72 65     
       71 75 65 73 74 2E 2E     
       2E                       
 079C  0D 0A 24                 crLF	db	13,10,'$' 
 079F  44 6F 77 6E 6C 6F 61     goXFR	db	"Downloading file: $" 
       64 69 6E 67 20 66 69     
       6C 65 3A 20 24           
 07B2  46 69 6C 65 20 74 72     doneXFR	db	"File transfer complete",13,10,'$' 
       61 6E 73 66 65 72 20     
       63 6F 6D 70 6C 65 74     
       65 0D 0A 24              
                                 
 07CB  55 6E 61 62 6C 65 20     filErr	db	"Unable to create file",13,10,'$' 
       74 6F 20 63 72 65 61     
       74 65 20 66 69 6C 65     
       0D 0A 24                 
 07E3  49 6E 76 61 6C 69 64     reqErr	db	"Invalid transfer request",13,10,'$' 
       20 74 72 61 6E 73 66     
       65 72 20 72 65 71 75     
       65 73 74 0D 0A 24        
                                 
 07FE                           code	ends 
                                 
                                	end	main 
Microsoft (R) Macro Assembler  Version 4.00                 3/15/18 17:49:36

download.asm                                                Symbols-1
                                                             

Segments and Groups:

                N a m e         	Size	Align	Combine Class

CODE . . . . . . . . . . . . . .  	07FE	WORD	PUBLIC	'CODE'

Symbols:            

                N a m e         	Type	Value	Attr         

BEGXFR . . . . . . . . . . . . .  	L BYTE 	077F	CODE
BLKLEN . . . . . . . . . . . . .  	L WORD 	0716	CODE
BLOCK  . . . . . . . . . . . . .  	L BYTE 	0316	CODE	Length = 0400

CHK1 . . . . . . . . . . . . . .  	L NEAR	02AA	CODE
CHK2 . . . . . . . . . . . . . .  	L NEAR	02C0	CODE
CHK3 . . . . . . . . . . . . . .  	L NEAR	02C4	CODE
CHK4 . . . . . . . . . . . . . .  	L NEAR	02D1	CODE
CHK5 . . . . . . . . . . . . . .  	L NEAR	02E8	CODE
CHK6 . . . . . . . . . . . . . .  	L NEAR	0301	CODE
CHK9 . . . . . . . . . . . . . .  	L NEAR	0310	CODE
CHKCOM . . . . . . . . . . . . .  	N PROC	02A3	CODE	Length = 006F
CHKMSG . . . . . . . . . . . . .  	L BYTE 	0740	CODE
COMADDR  . . . . . . . . . . . .  	L WORD 	0314	CODE
COMID  . . . . . . . . . . . . .  	L WORD 	0312	CODE
COMMSG . . . . . . . . . . . . .  	L BYTE 	072F	CODE
CRLF . . . . . . . . . . . . . .  	L BYTE 	079C	CODE

DEBUG  . . . . . . . . . . . . .  	Number	0001	
DONEXFR  . . . . . . . . . . . .  	L BYTE 	07B2	CODE

ERRMSG . . . . . . . . . . . . .  	L BYTE 	076A	CODE

FDATE  . . . . . . . . . . . . .  	L WORD 	0729	CODE
FHANDLE  . . . . . . . . . . . .  	L WORD 	072D	CODE
FILERR . . . . . . . . . . . . .  	L BYTE 	07CB	CODE
FNAME  . . . . . . . . . . . . .  	L BYTE 	0718	CODE	Length = 000D
FSIZE  . . . . . . . . . . . . .  	L WORD 	0725	CODE
FTIME  . . . . . . . . . . . . .  	L WORD 	072B	CODE

GETHEX . . . . . . . . . . . . .  	N PROC	0269	CODE	Length = 003A
GH1  . . . . . . . . . . . . . .  	L NEAR	0271	CODE
GH2  . . . . . . . . . . . . . .  	L NEAR	0289	CODE
GH8  . . . . . . . . . . . . . .  	L NEAR	02A0	CODE
GH9  . . . . . . . . . . . . . .  	L NEAR	02A1	CODE
GOXFR  . . . . . . . . . . . . .  	L BYTE 	079F	CODE

M1 . . . . . . . . . . . . . . .  	L NEAR	0105	CODE
M1A  . . . . . . . . . . . . . .  	L NEAR	010A	CODE
M2 . . . . . . . . . . . . . . .  	L NEAR	010C	CODE
M3 . . . . . . . . . . . . . . .  	L NEAR	0127	CODE
M3A  . . . . . . . . . . . . . .  	L NEAR	0129	CODE
M4 . . . . . . . . . . . . . . .  	L NEAR	0136	CODE
M4A  . . . . . . . . . . . . . .  	L NEAR	013F	CODE
Microsoft (R) Macro Assembler  Version 4.00                 3/15/18 17:49:36

download.asm                                                Symbols-2
                                                             

M4X  . . . . . . . . . . . . . .  	L NEAR	0155	CODE
M5 . . . . . . . . . . . . . . .  	L NEAR	0158	CODE
M5A  . . . . . . . . . . . . . .  	L NEAR	018F	CODE
M5B  . . . . . . . . . . . . . .  	L NEAR	0194	CODE
M6 . . . . . . . . . . . . . . .  	L NEAR	0198	CODE
M7 . . . . . . . . . . . . . . .  	L NEAR	01B4	CODE
M7X  . . . . . . . . . . . . . .  	L NEAR	01D7	CODE
M8 . . . . . . . . . . . . . . .  	L NEAR	01E2	CODE
M8A  . . . . . . . . . . . . . .  	L NEAR	01E5	CODE
MAIN . . . . . . . . . . . . . .  	N PROC	0100	CODE	Length = 00EC
MAXBLK . . . . . . . . . . . . .  	Number	0400	
MAXNAM . . . . . . . . . . . . .  	Number	000C	

RB1  . . . . . . . . . . . . . .  	L NEAR	0232	CODE
RB9  . . . . . . . . . . . . . .  	L NEAR	0249	CODE
RBB9 . . . . . . . . . . . . . .  	L NEAR	0268	CODE
RBLK1  . . . . . . . . . . . . .  	L NEAR	020D	CODE
RBLK9  . . . . . . . . . . . . .  	L NEAR	022C	CODE
READB  . . . . . . . . . . . . .  	N PROC	022F	CODE	Length = 001F
READBB . . . . . . . . . . . . .  	N PROC	024E	CODE	Length = 001B
READBLK  . . . . . . . . . . . .  	N PROC	01EC	CODE	Length = 0043
REQERR . . . . . . . . . . . . .  	L BYTE 	07E3	CODE


    385 Source  Lines
    385 Total   Lines
     81 Symbols

  48242 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
